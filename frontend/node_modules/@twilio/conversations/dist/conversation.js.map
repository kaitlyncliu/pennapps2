{"version":3,"file":"conversation.js","sources":["../src/conversation.ts"],"sourcesContent":["import { Logger } from \"./logger\";\n\nimport { ParticipantBindingOptions, Participants } from \"./data/participants\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"./participant\";\nimport { Messages } from \"./data/messages\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"./message\";\n\nimport { UriBuilder, parseToNumber } from \"./util\";\nimport { Users } from \"./data/users\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { ConversationsDataSource } from \"./data/conversations\";\nimport { McsClient } from \"@twilio/mcs-client\";\n\nimport { SyncClient, SyncDocument } from \"twilio-sync\";\nimport { TypingIndicator } from \"./services/typing-indicator\";\nimport { Network } from \"./services/network\";\nimport {\n  validateTypesAsync,\n  custom,\n  literal,\n  nonEmptyString,\n  nonNegativeInteger,\n  objectSchema,\n} from \"@twilio/declarative-type-validator\";\nimport {\n  attributesValidator,\n  optionalAttributesValidator,\n} from \"./interfaces/attributes\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { AddParticipantRequest } from \"./interfaces/commands/add-participant\";\nimport { EditConversationRequest } from \"./interfaces/commands/edit-conversation\";\nimport { ConversationResponse } from \"./interfaces/commands/conversation-response\";\nimport { ParticipantResponse } from \"./interfaces/commands/participant-response\";\nimport { EditNotificationLevelRequest } from \"./interfaces/commands/edit-notification-level\";\nimport {\n  EditLastReadMessageIndexRequest,\n  EditLastReadMessageIndexResponse,\n} from \"./interfaces/commands/edit-last-read-message-index\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { MessageBuilder } from \"./message-builder\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\n\ntype ConversationEvents = {\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  updated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  removed: (conversation: Conversation) => void;\n};\n\nconst log = Logger.scope(\"Conversation\");\n\nconst fieldMappings = {\n  lastMessage: \"lastMessage\",\n  attributes: \"attributes\",\n  createdBy: \"createdBy\",\n  dateCreated: \"dateCreated\",\n  dateUpdated: \"dateUpdated\",\n  friendlyName: \"friendlyName\",\n  lastConsumedMessageIndex: \"lastConsumedMessageIndex\",\n  notificationLevel: \"notificationLevel\",\n  sid: \"sid\",\n  status: \"status\",\n  uniqueName: \"uniqueName\",\n  state: \"state\",\n  bindings: \"bindings\",\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport interface ConversationServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ConversationInternalState {\n  uniqueName: string | null;\n  status: ConversationStatus;\n  attributes: JSONValue;\n  createdBy?: string;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  friendlyName: string | null;\n  lastReadMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ConversationState;\n  bindings: ConversationBindings;\n}\n\ninterface ConversationDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: JSONValue;\n  createdBy?: string;\n  friendlyName?: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  notificationLevel?: NotificationLevel;\n  bindings?: ConversationBindings;\n}\n\ninterface ConversationLinks {\n  self: string;\n  messages: string;\n  participants: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a conversation.\n */\ntype ConversationUpdateReason =\n  | \"attributes\"\n  | \"createdBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"friendlyName\"\n  | \"lastReadMessageIndex\"\n  | \"state\"\n  | \"status\"\n  | \"uniqueName\"\n  | \"lastMessage\"\n  | \"notificationLevel\"\n  | \"bindings\";\n\n/**\n * The status of the conversation, relative to the client: whether\n * the conversation has been `joined` or the client is\n * `notParticipating` in the conversation.\n */\ntype ConversationStatus = \"notParticipating\" | \"joined\";\n\n/**\n * The user's notification level for the conversation. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this conversation. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = \"default\" | \"muted\";\n\n/**\n * The state of the conversation.\n */\ninterface ConversationState {\n  /**\n   * The current state.\n   */\n  current: \"active\" | \"inactive\" | \"closed\";\n\n  /**\n   * Date at which the latest conversation state update happened.\n   */\n  dateUpdated: Date;\n}\n\ninterface ConversationUpdatedEventArgs {\n  conversation: Conversation;\n  updateReasons: ConversationUpdateReason[];\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationBindings {\n  email?: ConversationEmailBinding;\n  sms?: ConversationSmsBinding;\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationEmailBinding {\n  name?: string;\n  projected_address: string;\n}\n\ninterface ConversationSmsBinding {\n  address?: string;\n}\n\n/**\n * Configuration for attaching a media file to a message.\n * These options can be passed to {@link Conversation.sendMessage} and\n * {@link MessageBuilder.addMedia}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: null | string;\n\n  /**\n   * Optional filename.\n   */\n  filename?: string;\n\n  /**\n   * Content to post.\n   */\n  media: null | string | Buffer | Blob;\n}\n\n/**\n * These options can be passed to {@link Conversation.sendMessage}.\n */\ninterface SendEmailOptions {\n  /**\n   *  Message subject. Ignored for media messages.\n   */\n  subject?: string;\n}\n\n/**\n * Information about the last message of a conversation.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * A conversation represents communication between multiple Conversations clients\n */\nclass Conversation extends ReplayEventEmitter<ConversationEvents> {\n  /**\n   * Unique system identifier of the conversation.\n   */\n  public readonly sid: string;\n  public readonly links: ConversationLinks;\n\n  private readonly configuration: Configuration;\n  private readonly services: ConversationServices;\n  private channelState: ConversationInternalState;\n  private statusSource!: ConversationsDataSource;\n\n  private entityPromise!: Promise<void | SyncDocument> | null;\n  private entityName: string;\n  private entity!: SyncDocument | null;\n  private messagesEntity: Messages;\n  private participantsEntity: Participants;\n  private readonly participants: Map<string, Participant>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    descriptor: ConversationDescriptor,\n    sid: string,\n    links: ConversationLinks,\n    configuration: Configuration,\n    services: ConversationServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    const attributes = descriptor.attributes || {};\n    const createdBy = descriptor.createdBy;\n    const dateCreated = parseTime(descriptor.dateCreated);\n    const dateUpdated = parseTime(descriptor.dateUpdated);\n    const friendlyName = descriptor.friendlyName || null;\n    const lastReadMessageIndex = Number.isInteger(\n      descriptor.lastConsumedMessageIndex\n    )\n      ? descriptor.lastConsumedMessageIndex\n      : null;\n    const uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error(\"Attributes must be a valid JSON object.\");\n    }\n\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: \"notParticipating\",\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastReadMessageIndex,\n      bindings: descriptor.bindings ?? {},\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const participantsLinks = {\n      participants: this.links.participants,\n    };\n\n    this.participants = new Map();\n    this.participantsEntity = new Participants(\n      this,\n      this.participants,\n      participantsLinks,\n      this.configuration,\n      this.services\n    );\n    this.participantsEntity.on(\"participantJoined\", (participant) =>\n      this.emit(\"participantJoined\", participant)\n    );\n    this.participantsEntity.on(\"participantLeft\", (participant) =>\n      this.emit(\"participantLeft\", participant)\n    );\n    this.participantsEntity.on(\n      \"participantUpdated\",\n      (args: ParticipantUpdatedEventArgs) =>\n        this.emit(\"participantUpdated\", args)\n    );\n\n    this.messagesEntity = new Messages(this, configuration, services);\n    this.messagesEntity.on(\"messageAdded\", (message) =>\n      this._onMessageAdded(message)\n    );\n    this.messagesEntity.on(\"messageUpdated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n    this.messagesEntity.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n  }\n\n  /**\n   * Fired when a participant has joined the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that joined the conversation\n   * @event\n   */\n  static readonly participantJoined = \"participantJoined\";\n\n  /**\n   * Fired when a participant has left the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that left the conversation\n   * @event\n   */\n  static readonly participantLeft = \"participantLeft\";\n\n  /**\n   * Fired when data of a participant has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Participant} `participant` - participant that has received the update\n   *     * {@link ParticipantUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly participantUpdated = \"participantUpdated\";\n\n  /**\n   * Fired when a new message has been added to the conversation.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  static readonly messageAdded = \"messageAdded\";\n\n  /**\n   * Fired when message is removed from the conversation's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  static readonly messageRemoved = \"messageRemoved\";\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly messageUpdated = \"messageUpdated\";\n\n  /**\n   * Fired when a participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has stopped typing\n   * @event\n   */\n  static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when a participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has started typing\n   * @event\n   */\n  static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the data of the conversation has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Conversation} `conversation` - conversation that has received the update\n   *     * {@link ConversationUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly updated = \"updated\";\n\n  /**\n   * Fired when the conversation was destroyed or the currently-logged-in user has left private conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - conversation that has been removed\n   * @event\n   */\n  static readonly removed = \"removed\";\n\n  /**\n   * Unique name of the conversation.\n   */\n  public get uniqueName(): string | null {\n    return this.channelState.uniqueName;\n  }\n\n  /**\n   * Status of the conversation.\n   */\n  public get status(): ConversationStatus {\n    return this.channelState.status;\n  }\n\n  /**\n   * Name of the conversation.\n   */\n  public get friendlyName(): string | null {\n    return this.channelState.friendlyName;\n  }\n\n  /**\n   * Date this conversation was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this.channelState.dateUpdated;\n  }\n\n  /**\n   * Date this conversation was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this.channelState.dateCreated;\n  }\n\n  /**\n   * Identity of the user that created this conversation.\n   */\n  public get createdBy(): string {\n    return this.channelState.createdBy ?? \"\";\n  }\n\n  /**\n   * Custom attributes of the conversation.\n   */\n  public get attributes(): JSONValue {\n    return this.channelState.attributes;\n  }\n\n  /**\n   * Index of the last message the user has read in this conversation.\n   */\n  public get lastReadMessageIndex(): number | null {\n    return this.channelState.lastReadMessageIndex;\n  }\n\n  /**\n   * Last message sent to this conversation.\n   */\n  public get lastMessage(): LastMessage | undefined {\n    return this.channelState.lastMessage ?? undefined;\n  }\n\n  /**\n   * User notification level for this conversation.\n   */\n  public get notificationLevel(): NotificationLevel {\n    return this.channelState.notificationLevel ?? \"default\";\n  }\n\n  public get bindings(): ConversationBindings {\n    return this.channelState.bindings;\n  }\n\n  /**\n   * Current conversation limits.\n   */\n  public get limits(): ConversationLimits {\n    return this.configuration.limits;\n  }\n\n  /**\n   * State of the conversation.\n   */\n  public get state(): ConversationState | undefined {\n    return this.channelState.state;\n  }\n\n  /**\n   * Load and subscribe to this conversation and do not subscribe to its participants and messages.\n   * This or _subscribeStreams will need to be called before any events on conversation will fire.\n   * @internal\n   */\n  _subscribe() {\n    return (this.entityPromise =\n      this.entityPromise ??\n      this.services.syncClient\n        .document({ id: this.entityName, mode: \"open_existing\" })\n        .then((entity) => {\n          this.entity = entity;\n          this.entity.on(\"updated\", (args) => {\n            this._update(args.data);\n          });\n          this.entity.on(\"removed\", () => this.emit(\"removed\", this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch((err) => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != \"disconnected\") {\n            log.error(\"Failed to get conversation object\", err);\n          }\n          log.debug(\"ERROR: Failed to get conversation object\", err);\n          throw err;\n        }));\n  }\n\n  /**\n   * Load the attributes of this conversation and instantiate its participants and messages.\n   * This or _subscribe will need to be called before any events on the conversation will fire.\n   * This will need to be called before any events on participants or messages will fire\n   * @internal\n   */\n  async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace(\"_subscribeStreams, this.entity.data=\", this.entity?.data);\n      const messagesObjectName = (this.entity?.data as Record<string, string>)\n        .messages;\n      const rosterObjectName = (this.entity?.data as Record<string, string>)\n        .roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.participantsEntity.subscribe(rosterObjectName),\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== \"disconnected\") {\n        log.error(\"Failed to subscribe on conversation objects\", this.sid, err);\n      }\n      log.debug(\n        \"ERROR: Failed to subscribe on conversation objects\",\n        this.sid,\n        err\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this conversation.\n   * @internal\n   */\n  async _unsubscribe() {\n    if (this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.participantsEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe(),\n    ]);\n  }\n\n  /**\n   * Set conversation status.\n   * @internal\n   */\n  _setStatus(status: ConversationStatus, source: ConversationsDataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) {\n      return;\n    }\n\n    this.channelState.status = status;\n\n    if (status === \"joined\") {\n      this._subscribeStreams().catch((err) => {\n        log.debug(\"ERROR while setting conversation status \" + status, err);\n        if (this.services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch((err) => {\n        log.debug(\"ERROR while setting conversation status \" + status, err);\n        if (this.services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Get the source of the conversation update.\n   * @internal\n   */\n  _statusSource(): ConversationsDataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, conversationSid) {\n    try {\n      if (typeof update.attributes === \"string\") {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn(\n        \"Retrieved malformed attributes from the server for conversation: \" +\n          conversationSid\n      );\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn(\n        \"Retrieved malformed dateCreated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn(\n        \"Retrieved malformed dateUpdated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn(\n        \"Retrieved malformed lastMessage.timestamp from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Update the local conversation object with new values.\n   * @internal\n   */\n  _update(update) {\n    log.trace(\"_update\", update);\n\n    Conversation.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ConversationUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (\n            !update.status ||\n            update.status === \"unknown\" ||\n            this.channelState.status === update.status\n          ) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (\n            update.lastConsumedMessageIndex === undefined ||\n            update.lastConsumedMessageIndex ===\n              this.channelState.lastReadMessageIndex\n          ) {\n            break;\n          }\n\n          this.channelState.lastReadMessageIndex =\n            update.lastConsumedMessageIndex;\n          updateReasons.add(\"lastReadMessageIndex\");\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (\n            update.lastMessage?.index !== undefined &&\n            update.lastMessage.index !== this.channelState.lastMessage.index\n          ) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (\n            update.lastMessage?.timestamp !== undefined &&\n            this.channelState.lastMessage?.dateCreated?.getTime() !==\n              update.lastMessage.timestamp.getTime()\n          ) {\n            this.channelState.lastMessage.dateCreated =\n              update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.bindings:\n          if (isEqual(this.channelState.bindings, update.bindings)) {\n            break;\n          }\n\n          this.channelState.bindings = update.bindings;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates =\n            isDate &&\n            this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit(\"updated\", {\n        conversation: this,\n        updateReasons: [...updateReasons],\n      });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onMessageAdded(message) {\n    for (const participant of this.participants.values()) {\n      if (participant.identity === message.author) {\n        participant._endTyping();\n        break;\n      }\n    }\n    this.emit(\"messageAdded\", message);\n  }\n\n  private async _setLastReadMessageIndex(\n    index: number | null\n  ): Promise<number> {\n    const result = await this.services.commandExecutor.mutateResource<\n      EditLastReadMessageIndexRequest,\n      EditLastReadMessageIndexResponse\n    >(\"post\", `${this.configuration.links.myConversations}/${this.sid}`, {\n      last_read_message_index: index,\n    });\n\n    return result.unread_messages_count;\n  }\n\n  /**\n   * Add a participant to the conversation by its identity.\n   * @param identity Identity of the Client to add.\n   * @param attributes Attributes to be attached to the participant.\n   */\n  @validateTypesAsync(nonEmptyString, optionalAttributesValidator)\n  async add(\n    identity: string,\n    attributes?: JSONValue\n  ): Promise<ParticipantResponse> {\n    return this.participantsEntity.add(identity, attributes ?? {});\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   * @param proxyAddress Proxy (Twilio) address of the participant.\n   * @param address User address of the participant.\n   * @param attributes Attributes to be attached to the participant.\n   * @param bindingOptions Options for adding email participants - name and CC/To level.\n   */\n  @validateTypesAsync(\n    nonEmptyString,\n    nonEmptyString,\n    optionalAttributesValidator\n  )\n  async addNonChatParticipant(\n    proxyAddress: string,\n    address: string,\n    attributes: JSONValue = {},\n    bindingOptions: ParticipantBindingOptions = {}\n  ): Promise<ParticipantResponse> {\n    return this.participantsEntity.addNonChatParticipant(\n      proxyAddress,\n      address,\n      attributes ?? {},\n      bindingOptions ?? {}\n    );\n  }\n\n  /**\n   * Advance the conversation's last read message index to the current read horizon.\n   * Rejects if the user is not a participant of the conversation.\n   * Last read message index is updated only if the new index value is higher than the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the conversation.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  async advanceLastReadMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < (this.lastReadMessageIndex || 0)) {\n      return await this._setLastReadMessageIndex(this.lastReadMessageIndex);\n    }\n\n    return await this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Delete the conversation and unsubscribe from its events.\n   */\n  async delete(): Promise<Conversation> {\n    await this.services.commandExecutor.mutateResource(\n      \"delete\",\n      this.links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Conversation.\n   */\n  async getAttributes(): Promise<JSONValue> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Returns messages from the conversation using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is 30.\n   * @param anchor Index of the newest message to fetch. Default is from the end.\n   * @param direction Query direction. By default it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", literal(\"backwards\", \"forward\")]\n  )\n  async getMessages(\n    pageSize?: number,\n    anchor?: number,\n    direction?: \"backwards\" | \"forward\"\n  ): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the participants who are joined to this conversation.\n   */\n  async getParticipants(): Promise<Participant[]> {\n    await this._subscribeStreams();\n    return this.participantsEntity.getParticipants();\n  }\n\n  /**\n   * Get conversation participants count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Conversations system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  async getParticipantsCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n\n    return response.body.participants_count ?? 0;\n  }\n\n  /**\n   * Get a participant by its SID.\n   * @param participantSid Participant SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getParticipantBySid(\n    participantSid: string\n  ): Promise<Participant | null> {\n    return this.participantsEntity.getParticipantBySid(participantSid);\n  }\n\n  /**\n   * Get a participant by its identity.\n   * @param identity Participant identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getParticipantByIdentity(\n    identity: string | null = \"\"\n  ): Promise<Participant | null> {\n    return this.participantsEntity.getParticipantByIdentity(identity ?? \"\");\n  }\n\n  /**\n   * Get the total message count in the conversation.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Conversations system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n\n    return response.body.messages_count ?? 0;\n  }\n\n  /**\n   * Get unread messages count for the user if they are a participant of this conversation.\n   * Rejects if the user is not a participant of the conversation.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Conversation.updateLastReadMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Conversations system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  async getUnreadMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations)\n      .path(this.sid)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error(\n        \"Conversation was not found in the user conversations list\"\n      );\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === \"number\") {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Join the conversation and subscribe to its events.\n   */\n  async join(): Promise<Conversation> {\n    await this.services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.participants, {\n      identity: this.configuration.userIdentity,\n    });\n\n    return this;\n  }\n\n  /**\n   * Leave the conversation.\n   */\n  async leave(): Promise<Conversation> {\n    if (this.channelState.status === \"joined\") {\n      await this.services.commandExecutor.mutateResource(\n        \"delete\",\n        `${this.links.participants}/${this.configuration.userIdentity}`\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a participant from the conversation. When a string is passed as the\n   * argument, it will assume that the string is an identity or SID.\n   * @param participant Identity, SID or the participant object to remove.\n   */\n  /* eslint-disable @typescript-eslint/ban-ts-comment */\n  // @ts-ignore TODO: fix validateTypesAsync typing\n  @validateTypesAsync([nonEmptyString, Participant])\n  async removeParticipant(participant: string | Participant): Promise<void> {\n    await this.participantsEntity.remove(\n      typeof participant === \"string\" ? participant : participant.sid\n    );\n  }\n\n  /**\n   * Send a message to the conversation.\n   * @param message Message body for the text message,\n   * `FormData` or {@link SendMediaOptions} for media content. Sending FormData is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @param emailOptions Email options for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      \"string\",\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, \"an instance of FormData\"]),\n      objectSchema(\"media options\", {\n        contentType: nonEmptyString,\n        media: custom((value) => {\n          let isValid =\n            (typeof value === \"string\" && value.length > 0) ||\n            value instanceof Uint8Array ||\n            value instanceof ArrayBuffer;\n\n          if (typeof Blob === \"function\") {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            \"a non-empty string, an instance of Buffer or an instance of Blob\",\n          ];\n        }),\n      }),\n    ],\n    optionalAttributesValidator,\n    [\n      \"undefined\",\n      literal(null),\n      objectSchema(\"email attributes\", {\n        subject: [nonEmptyString, \"undefined\"],\n      }),\n    ]\n  )\n  async sendMessage(\n    message: null | string | FormData | SendMediaOptions,\n    messageAttributes?: JSONValue,\n    emailOptions?: SendEmailOptions\n  ): Promise<number> {\n    if (typeof message === \"string\" || message === null) {\n      const response = await this.messagesEntity.send(\n        message,\n        messageAttributes,\n        emailOptions\n      );\n      return parseToNumber(response.index) ?? 0;\n    }\n\n    const response = await this.messagesEntity.sendMedia(\n      message,\n      messageAttributes,\n      emailOptions\n    );\n    return parseToNumber(response.index) ?? 0;\n  }\n\n  /**\n   * New interface to prepare for sending a message.\n   * Use instead of `sendMessage`.\n   * @return A MessageBuilder to help set all message sending options.\n   */\n  public prepareMessage(): MessageBuilder {\n    return new MessageBuilder(this.limits, this.messagesEntity);\n  }\n\n  /**\n   * Set last read message index of the conversation to the index of the last known message.\n   * @return Resulting unread messages count in the conversation.\n   */\n  public async setAllMessagesRead(): Promise<number> {\n    await this._subscribeStreams();\n\n    const messagesPage = await this.getMessages(1);\n\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastReadMessageIndex(messagesPage.items[0].index);\n    }\n\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the conversation unread.\n   * @return Resulting unread messages count in the conversation.\n   */\n  public async setAllMessagesUnread(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastReadMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this conversation.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal(\"default\", \"muted\"))\n  async setUserNotificationLevel(\n    notificationLevel: NotificationLevel\n  ): Promise<void> {\n    await this.services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      \"post\",\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel,\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently typing in this conversation.\n   * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.\n   */\n  typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the conversation.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(attributesValidator)\n  async updateAttributes(attributes: JSONValue): Promise<Conversation> {\n    await this.services.commandExecutor.mutateResource<\n      EditConversationRequest,\n      ConversationResponse\n    >(\"post\", this.links.self, {\n      attributes:\n        attributes !== undefined ? JSON.stringify(attributes) : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the conversation.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync([\"string\"])\n  async updateFriendlyName(friendlyName: string): Promise<Conversation> {\n    if (this.channelState.friendlyName !== friendlyName) {\n      await this.services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this.links.self, { friendly_name: friendlyName });\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last read message index to the current read horizon.\n   * @param index Message index to set as last read.\n   * If null is provided, then the behavior is identical to {@link Conversation.setAllMessagesUnread}.\n   * @returns Resulting unread messages count in the conversation.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  async updateLastReadMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the conversation.\n   * @param uniqueName New unique name for the conversation. Setting unique name to null removes it.\n   */\n  @validateTypesAsync([\"string\", literal(null)])\n  async updateUniqueName(uniqueName: string | null): Promise<Conversation> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = \"\";\n      }\n\n      await this.services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this.links.self, {\n        unique_name: uniqueName,\n      });\n    }\n\n    return this;\n  }\n}\n\nexport {\n  ConversationDescriptor,\n  Conversation,\n  ConversationUpdateReason,\n  ConversationStatus,\n  NotificationLevel,\n  ConversationState,\n  ConversationUpdatedEventArgs,\n  SendMediaOptions,\n  SendEmailOptions,\n  LastMessage,\n  ConversationBindings,\n  ConversationEmailBinding,\n};\n"],"names":["Logger","ReplayEventEmitter","Participants","Messages","isEqual","UriBuilder","parseToNumber","MessageBuilder","__decorate","validateTypesAsync","nonEmptyString","optionalAttributesValidator","nonNegativeInteger","literal","Participant","custom","objectSchema","attributesValidator"],"mappings":"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"}