{"version":3,"file":"message-builder.js","sources":["../src/message-builder.ts"],"sourcesContent":["import { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { SendMediaOptions } from \"./conversation\";\nimport { UnsentMessage } from \"./unsent-message\";\nimport { JSONValue } from \"./types\";\nimport { Messages } from \"./data/messages\";\n\n/**\n * Message builder. Allows the message to be built and sent via method chaining.\n *\n * Example:\n *\n * ```ts\n * await testConversation.prepareMessage()\n *   .setBody('Hello!')\n *   .setAttributes({foo: 'bar'})\n *   .addMedia(media1)\n *   .addMedia(media2)\n *   .build()\n *   .send();\n * ```\n */\nclass MessageBuilder {\n  private readonly message: UnsentMessage;\n  private emailBodies: Map<string, FormData | SendMediaOptions>;\n  private emailHistories: Map<string, FormData | SendMediaOptions>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private readonly limits: ConversationLimits,\n    messagesEntity: Messages\n  ) {\n    this.message = new UnsentMessage(messagesEntity);\n    this.emailBodies = new Map<string, FormData | SendMediaOptions>();\n    this.emailHistories = new Map<string, FormData | SendMediaOptions>();\n  }\n\n  /**\n   * Sets the message body.\n   * @param text Contents of the body.\n   */\n  setBody(text: string): MessageBuilder {\n    this.message.text = text;\n    return this;\n  }\n\n  /**\n   * Sets the message subject.\n   * @param subject Contents of the subject.\n   */\n  setSubject(subject: string): MessageBuilder {\n    this.message.emailOptions.subject = subject;\n    return this;\n  }\n\n  /**\n   * Sets the message attributes.\n   * @param attributes Message attributes.\n   */\n  setAttributes(attributes: JSONValue): MessageBuilder {\n    this.message.attributes = attributes;\n    return this;\n  }\n\n  /**\n   * Set email body with given MIME-type.\n   * @param mimeType Format of the body to set (text/plain or text/html).\n   * @param body Body payload in selected format.\n   */\n  setEmailBody(\n    mimeType: string,\n    body: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailBodies.set(mimeType, body);\n    return this;\n  }\n\n  /**\n   * Set email history with given MIME-type.\n   * @param mimeType Format of the history to set (text/plain or text/html).\n   * @param history History payload in selected format.\n   */\n  setEmailHistory(\n    mimeType: string,\n    history: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailHistories.set(mimeType, history);\n    return this;\n  }\n\n  /**\n   * Adds media to the message.\n   * @param payload Media to add.\n   */\n  addMedia(payload: FormData | SendMediaOptions): MessageBuilder {\n    if (typeof FormData === \"undefined\" && payload instanceof FormData) {\n      throw new Error(\"Could not add FormData content whilst not in a browser\");\n    }\n    if (!(payload instanceof FormData)) {\n      const mediaOptions = payload as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error(\n          \"Media content in SendMediaOptions must contain non-empty contentType and media\"\n        );\n      }\n    }\n    this.message.mediaContent.push([\"media\", payload]);\n    return this;\n  }\n\n  /**\n   * Builds the message, making it ready to be sent.\n   */\n  build(): UnsentMessage {\n    this.emailBodies.forEach((_, key) => {\n      if (!this.limits.emailBodiesAllowedMimeTypes.includes(key)) {\n        throw new Error(`Unsupported email body MIME type ${key}`);\n      }\n    });\n    this.emailHistories.forEach((_, key) => {\n      if (!this.limits.emailHistoriesAllowedMimeTypes.includes(key)) {\n        throw new Error(`Unsupported email history MIME type ${key}`);\n      }\n    });\n    if (\n      this.emailBodies.size > this.limits.emailBodiesAllowedMimeTypes.length\n    ) {\n      throw new Error(\n        `Too many email bodies attached to the message (${this.emailBodies.size} > ${this.limits.emailBodiesAllowedMimeTypes.length})`\n      );\n    }\n    if (\n      this.emailHistories.size >\n      this.limits.emailHistoriesAllowedMimeTypes.length\n    ) {\n      throw new Error(\n        `Too many email histories attached to the message (${this.emailHistories.size} > ${this.limits.emailHistoriesAllowedMimeTypes.length})`\n      );\n    }\n\n    if (\n      this.message.mediaContent.length > this.limits.mediaAttachmentsCountLimit\n    ) {\n      throw new Error(\n        `Too many media attachments in the message (${this.message.mediaContent.length} > ${this.limits.mediaAttachmentsCountLimit})`\n      );\n    }\n\n    // @todo we don't know the sizes of the attachments in FormData\n    // @todo insertion below makes build() method non-repeatable - probably move to UnsentMessage.send() or even sendV2()?\n\n    this.emailBodies.forEach((body) => {\n      this.message.mediaContent.push([\"body\", body]);\n    });\n\n    this.emailHistories.forEach((history) => {\n      this.message.mediaContent.push([\"history\", history]);\n    });\n\n    return this.message;\n  }\n\n  private getPayloadContentType(\n    payload: FormData | SendMediaOptions\n  ): string | null {\n    if (typeof FormData !== \"undefined\" && payload instanceof FormData) {\n      return payload.get(\"Content-Type\") as string;\n    }\n    return (payload as SendMediaOptions).contentType;\n  }\n}\n\nexport { MessageBuilder };\n"],"names":["UnsentMessage"],"mappings":"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"}