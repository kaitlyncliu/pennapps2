{"version":3,"file":"message.js","sources":["../src/message.ts"],"sourcesContent":["import { parseAttributes, UriBuilder } from \"./util\";\nimport { Logger } from \"./logger\";\nimport { Conversation } from \"./conversation\";\nimport { McsClient, MediaCategory } from \"@twilio/mcs-client\";\nimport { Media } from \"./media\";\nimport { Participant } from \"./participant\";\nimport {\n  AggregatedDeliveryDescriptor,\n  AggregatedDeliveryReceipt,\n} from \"./aggregated-delivery-receipt\";\nimport {\n  validateTypes,\n  validateTypesAsync,\n  nonEmptyString,\n  custom,\n} from \"@twilio/declarative-type-validator\";\nimport { attributesValidator } from \"./interfaces/attributes\";\nimport { Network } from \"./services/network\";\nimport { RestPaginator } from \"./rest-paginator\";\nimport { DetailedDeliveryReceipt } from \"./detailed-delivery-receipt\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { EditMessageRequest } from \"./interfaces/commands/edit-message\";\nimport { MessageResponse } from \"./interfaces/commands/message-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\nimport { ResponseMeta } from \"./interfaces/commands/response-meta\";\nimport { DeliveryReceiptResponse } from \"./interfaces/commands/delivery-receipt-response\";\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Message\");\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author: string | null;\n  subject: string | null;\n  body: string | null;\n  dateUpdated: Date | null;\n  lastUpdatedBy: string | null;\n  attributes: JSONValue;\n  timestamp: Date | null;\n  type: MessageType;\n  media: Media | null;\n  medias: Media[] | null;\n  participantSid: string | null;\n  aggregatedDeliveryReceipt: AggregatedDeliveryReceipt | null;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  network: Network;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | \"body\"\n  | \"lastUpdatedBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"attributes\"\n  | \"author\"\n  | \"deliveryReceipt\"\n  | \"subject\";\n\n/**\n * Type of a message.\n */\ntype MessageType = \"text\" | \"media\";\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\nexport interface MessageData {\n  sid: string;\n  text?: string;\n  type?: MessageType;\n  author: string | null;\n  subject: string | null;\n  lastUpdatedBy?: string | null;\n  attributes?: JSONValue;\n  dateUpdated: string;\n  timestamp?: string;\n  medias?: Media[];\n  media?: Media;\n  memberSid?: string;\n  delivery?: AggregatedDeliveryDescriptor;\n}\n\n/**\n * A message in a conversation.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  /**\n   * Conversation that the message is in.\n   */\n  public readonly conversation: Conversation;\n\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  private state: MessageState;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: MessageData,\n    conversation: Conversation,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author,\n      subject: data.subject,\n      body: data.text ?? null,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ?? null,\n      attributes: parseAttributes(\n        data.attributes,\n        `Got malformed attributes for the message ${data.sid}`,\n        log\n      ),\n      type: data.type ?? \"text\",\n      media:\n        data.type && data.type === \"media\" && data.media\n          ? new Media(data.media, this.services)\n          : null,\n      medias:\n        data.type && data.type === \"media\" && data.medias\n          ? data.medias.map((m) => new Media(m, this.services))\n          : null,\n      participantSid: data.memberSid ?? null,\n      aggregatedDeliveryReceipt: data.delivery\n        ? new AggregatedDeliveryReceipt(data.delivery)\n        : null,\n    };\n  }\n\n  /**\n   * Fired when the properties or the body of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = \"updated\";\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string | null {\n    return this.state.author;\n  }\n\n  /**\n   * Message subject. Used only in email conversations.\n   */\n  public get subject(): string | null {\n    return this.state.subject;\n  }\n\n  /**\n   * Body of the message.\n   */\n  public get body(): string | null {\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this.state.dateUpdated;\n  }\n\n  /**\n   * Index of the message in the conversation's messages list.\n   * By design of the Conversations system, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages it is better to use the read horizon API.\n   * See {@link Conversation.getUnreadMessagesCount} for details.\n   */\n  public get index(): number {\n    return this.state.index;\n  }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string | null {\n    return this.state.lastUpdatedBy;\n  }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this.state.timestamp;\n  }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): JSONValue {\n    return this.state.attributes;\n  }\n\n  /**\n   * Type of the message.\n   */\n  public get type(): MessageType {\n    return this.state.type;\n  }\n\n  /**\n   * One of the attached media (if present).\n   * @deprecated Use attachedMedia instead. Note that the latter is now an array.\n   */\n  public get media(): Media | null {\n    return this.state.media;\n  }\n\n  /**\n   * Return all media attachments, except email body/history attachments, without temporary urls.\n   */\n  public get attachedMedia(): Array<Media> | null {\n    return this.getMediaByCategory([\"media\"]);\n  }\n\n  /**\n   * The server-assigned unique identifier of the authoring participant.\n   */\n  public get participantSid(): string | null {\n    return this.state.participantSid;\n  }\n\n  /**\n   * Aggregated information about the message delivery statuses across all participants of a conversation..\n   */\n  public get aggregatedDeliveryReceipt(): AggregatedDeliveryReceipt | null {\n    return this.state.aggregatedDeliveryReceipt;\n  }\n\n  /**\n   * Return a (possibly empty) array of media matching a specific set of categories.\n   * Allowed category is so far only 'media'.\n   * @param categories Array of categories to match.\n   * @returns Array of media descriptors matching given categories.\n   */\n  public getMediaByCategory(\n    categories: Array<MediaCategory>\n  ): Array<Media> | null {\n    return (this.state.medias ?? []).filter((m) =>\n      categories.includes(m.category)\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email body attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailBodiesAllowedMimeTypes array.\n   * @param type Type of email body to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailBody(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategory([\"body\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email history attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailHistoriesAllowedMimeTypes array.\n   * @param type Type of email history to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailHistory(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategory([\"history\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  _update(data) {\n    const updateReasons: MessageUpdateReason[] = [];\n\n    if (\n      (data.text || typeof data.text === \"string\") &&\n      data.text !== this.state.body\n    ) {\n      this.state.body = data.text;\n      updateReasons.push(\"body\");\n    }\n\n    if (data.subject && data.subject !== this.state.subject) {\n      this.state.subject = data.subject;\n      updateReasons.push(\"subject\");\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push(\"lastUpdatedBy\");\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push(\"author\");\n    }\n\n    if (\n      data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !==\n        (this.state.dateUpdated && this.state.dateUpdated.getTime())\n    ) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push(\"dateUpdated\");\n    }\n\n    if (\n      data.timestamp &&\n      new Date(data.timestamp).getTime() !==\n        (this.state.timestamp && this.state.timestamp.getTime())\n    ) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push(\"dateCreated\");\n    }\n\n    const updatedAttributes = parseAttributes(\n      data.attributes,\n      `Got malformed attributes for the message ${this.sid}`,\n      log\n    );\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push(\"attributes\");\n    }\n\n    const updatedAggregatedDelivery = data.delivery;\n    const currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;\n    const isUpdatedAggregateDeliveryValid =\n      !!updatedAggregatedDelivery &&\n      !!updatedAggregatedDelivery.total &&\n      !!updatedAggregatedDelivery.delivered &&\n      !!updatedAggregatedDelivery.failed &&\n      !!updatedAggregatedDelivery.read &&\n      !!updatedAggregatedDelivery.sent &&\n      !!updatedAggregatedDelivery.undelivered;\n    if (isUpdatedAggregateDeliveryValid) {\n      if (!currentAggregatedDelivery) {\n        this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(\n          updatedAggregatedDelivery\n        );\n        updateReasons.push(\"deliveryReceipt\");\n      } else if (\n        !currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)\n      ) {\n        currentAggregatedDelivery._update(updatedAggregatedDelivery);\n        updateReasons.push(\"deliveryReceipt\");\n      }\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit(\"updated\", { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the participant who is the author of the message.\n   */\n  public async getParticipant(): Promise<Participant> {\n    let participant: Participant | null = null;\n    if (this.state.participantSid) {\n      participant = await this.conversation\n        .getParticipantBySid(this.state.participantSid)\n        .catch(() => {\n          log.debug(\n            `Participant with sid \"${this.participantSid}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (!participant && this.state.author) {\n      participant = await this.conversation\n        .getParticipantByIdentity(this.state.author)\n        .catch(() => {\n          log.debug(\n            `Participant with identity \"${this.author}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (participant) {\n      return participant;\n    }\n    let errorMesage = \"Participant with \";\n    if (this.state.participantSid) {\n      errorMesage += \"SID '\" + this.state.participantSid + \"' \";\n    }\n    if (this.state.author) {\n      if (this.state.participantSid) {\n        errorMesage += \"or \";\n      }\n      errorMesage += \"identity '\" + this.state.author + \"' \";\n    }\n    if (errorMesage === \"Participant with \") {\n      errorMesage = \"Participant \";\n    }\n    errorMesage += \"was not found\";\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Get the delivery receipts of the message.\n   */\n  public async getDetailedDeliveryReceipts(): Promise<\n    DetailedDeliveryReceipt[]\n  > {\n    let paginator: Paginator<DetailedDeliveryReceipt> =\n      await this._getDetailedDeliveryReceiptsPaginator();\n    let detailedDeliveryReceipts: DetailedDeliveryReceipt[] = [];\n\n    while (true) {\n      detailedDeliveryReceipts = [\n        ...detailedDeliveryReceipts,\n        ...paginator.items,\n      ];\n\n      if (!paginator.hasNextPage) {\n        break;\n      }\n\n      paginator = await paginator.nextPage();\n    }\n\n    return detailedDeliveryReceipts;\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      \"delete\",\n      this.links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync(\"string\")\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      body,\n    });\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(attributesValidator)\n  public async updateAttributes(attributes: JSONValue): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set using single operation.\n   * @param contentSet Set of media attachments to query for content URL.\n   */\n  @validateTypesAsync(\n    custom((value) => [\n      value instanceof Array &&\n        value.length > 0 &&\n        value.reduce((a, c) => a && c instanceof Media, true),\n      \"a non-empty array of Media\",\n    ])\n  )\n  public async attachTemporaryUrlsFor(\n    contentSet: Media[] | null\n  ): Promise<Media[]> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.\n    const sids = contentSet?.map((m) => m.sid);\n    if (this.services.mcsClient && sids) {\n      return (await this.services.mcsClient.mediaSetGet(sids)).map((item) => {\n        return new Media(item, this.services);\n      });\n    } else {\n      throw new Error(\"Media Content Service is unavailable\");\n    }\n  }\n\n  private async _getDetailedDeliveryReceiptsPaginator(options?: {\n    pageToken?: string;\n    pageSize?: number;\n  }): Promise<Paginator<DetailedDeliveryReceipt>> {\n    const messagesReceiptsUrl = this.configuration.links.messagesReceipts\n      .replace(\"%s\", this.conversation.sid)\n      .replace(\"%s\", this.sid);\n    const url = new UriBuilder(messagesReceiptsUrl)\n      .arg(\"PageToken\", options?.pageToken as string)\n      .arg(\"PageSize\", options?.pageSize as number)\n      .build();\n    const response = await this.services.network.get<\n      { delivery_receipts: DeliveryReceiptResponse[] } & ResponseMeta\n    >(url);\n\n    return new RestPaginator<DetailedDeliveryReceipt>(\n      response.body.delivery_receipts.map(\n        (x) => new DetailedDeliveryReceipt(x)\n      ),\n      (pageToken, pageSize) =>\n        this._getDetailedDeliveryReceiptsPaginator({ pageToken, pageSize }),\n      response.body.meta.previous_token,\n      response.body.meta.next_token\n    );\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs,\n};\n"],"names":["Logger","ReplayEventEmitter","index","parseAttributes","Media","AggregatedDeliveryReceipt","isEqual","UriBuilder","RestPaginator","DetailedDeliveryReceipt","__decorate","validateTypes","nonEmptyString","validateTypesAsync","attributesValidator","custom"],"mappings":"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"}