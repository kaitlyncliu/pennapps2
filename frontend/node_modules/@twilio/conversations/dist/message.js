/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var index = require('./util/index.js');
var logger = require('./logger.js');
var media = require('./media.js');
var aggregatedDeliveryReceipt = require('./aggregated-delivery-receipt.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
var attributes = require('./interfaces/attributes.js');
var restPaginator = require('./rest-paginator.js');
var detailedDeliveryReceipt = require('./detailed-delivery-receipt.js');
var replayEventEmitter = require('@twilio/replay-event-emitter');
var isEqual = require('lodash.isequal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

const log = logger.Logger.scope("Message");
/**
 * A message in a conversation.
 */
class Message extends replayEventEmitter.ReplayEventEmitter {
    /**
     * @internal
     */
    constructor(index$1, data, conversation, links, configuration, services) {
        var _a, _b, _c, _d;
        super();
        this.conversation = conversation;
        this.links = links;
        this.configuration = configuration;
        this.services = services;
        this.state = {
            sid: data.sid,
            index: index$1,
            author: data.author,
            subject: data.subject,
            body: (_a = data.text) !== null && _a !== void 0 ? _a : null,
            timestamp: data.timestamp ? new Date(data.timestamp) : null,
            dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
            lastUpdatedBy: (_b = data.lastUpdatedBy) !== null && _b !== void 0 ? _b : null,
            attributes: index.parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),
            type: (_c = data.type) !== null && _c !== void 0 ? _c : "text",
            media: data.type && data.type === "media" && data.media
                ? new media.Media(data.media, this.services)
                : null,
            medias: data.type && data.type === "media" && data.medias
                ? data.medias.map((m) => new media.Media(m, this.services))
                : null,
            participantSid: (_d = data.memberSid) !== null && _d !== void 0 ? _d : null,
            aggregatedDeliveryReceipt: data.delivery
                ? new aggregatedDeliveryReceipt.AggregatedDeliveryReceipt(data.delivery)
                : null,
        };
    }
    /**
     * The server-assigned unique identifier for the message.
     */
    get sid() {
        return this.state.sid;
    }
    /**
     * Name of the user that sent the message.
     */
    get author() {
        return this.state.author;
    }
    /**
     * Message subject. Used only in email conversations.
     */
    get subject() {
        return this.state.subject;
    }
    /**
     * Body of the message.
     */
    get body() {
        return this.state.body;
    }
    /**
     * Date this message was last updated on.
     */
    get dateUpdated() {
        return this.state.dateUpdated;
    }
    /**
     * Index of the message in the conversation's messages list.
     * By design of the Conversations system, the message indices may have arbitrary gaps between them,
     * that does not necessarily mean they were deleted or otherwise modified - just that
     * messages may have some non-contiguous indices even if they are being sent immediately one after another.
     *
     * Trying to use indices for some calculations is going to be unreliable.
     *
     * To calculate the number of unread messages it is better to use the read horizon API.
     * See {@link Conversation.getUnreadMessagesCount} for details.
     */
    get index() {
        return this.state.index;
    }
    /**
     * Identity of the last user that updated the message.
     */
    get lastUpdatedBy() {
        return this.state.lastUpdatedBy;
    }
    /**
     * Date this message was created on.
     */
    get dateCreated() {
        return this.state.timestamp;
    }
    /**
     * Custom attributes of the message.
     */
    get attributes() {
        return this.state.attributes;
    }
    /**
     * Type of the message.
     */
    get type() {
        return this.state.type;
    }
    /**
     * One of the attached media (if present).
     * @deprecated Use attachedMedia instead. Note that the latter is now an array.
     */
    get media() {
        return this.state.media;
    }
    /**
     * Return all media attachments, except email body/history attachments, without temporary urls.
     */
    get attachedMedia() {
        return this.getMediaByCategory(["media"]);
    }
    /**
     * The server-assigned unique identifier of the authoring participant.
     */
    get participantSid() {
        return this.state.participantSid;
    }
    /**
     * Aggregated information about the message delivery statuses across all participants of a conversation..
     */
    get aggregatedDeliveryReceipt() {
        return this.state.aggregatedDeliveryReceipt;
    }
    /**
     * Return a (possibly empty) array of media matching a specific set of categories.
     * Allowed category is so far only 'media'.
     * @param categories Array of categories to match.
     * @returns Array of media descriptors matching given categories.
     */
    getMediaByCategory(categories) {
        var _a;
        return ((_a = this.state.medias) !== null && _a !== void 0 ? _a : []).filter((m) => categories.includes(m.category));
    }
    /**
     * Get a media descriptor for an email body attachment of a provided type.
     * Allowed body types are returned in the Conversation.limits().emailBodiesAllowedMimeTypes array.
     * @param type Type of email body to request, defaults to `text/plain`.
     */
    getEmailBody(type = "text/plain") {
        var _a, _b;
        return ((_b = (_a = this.getMediaByCategory(["body"])) === null || _a === void 0 ? void 0 : _a.filter((m) => m.contentType == type).shift()) !== null && _b !== void 0 ? _b : null);
    }
    /**
     * Get a media descriptor for an email history attachment of a provided type.
     * Allowed body types are returned in the Conversation.limits().emailHistoriesAllowedMimeTypes array.
     * @param type Type of email history to request, defaults to `text/plain`.
     */
    getEmailHistory(type = "text/plain") {
        var _a, _b;
        return ((_b = (_a = this.getMediaByCategory(["history"])) === null || _a === void 0 ? void 0 : _a.filter((m) => m.contentType == type).shift()) !== null && _b !== void 0 ? _b : null);
    }
    _update(data) {
        const updateReasons = [];
        if ((data.text || typeof data.text === "string") &&
            data.text !== this.state.body) {
            this.state.body = data.text;
            updateReasons.push("body");
        }
        if (data.subject && data.subject !== this.state.subject) {
            this.state.subject = data.subject;
            updateReasons.push("subject");
        }
        if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
            this.state.lastUpdatedBy = data.lastUpdatedBy;
            updateReasons.push("lastUpdatedBy");
        }
        if (data.author && data.author !== this.state.author) {
            this.state.author = data.author;
            updateReasons.push("author");
        }
        if (data.dateUpdated &&
            new Date(data.dateUpdated).getTime() !==
                (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
            this.state.dateUpdated = new Date(data.dateUpdated);
            updateReasons.push("dateUpdated");
        }
        if (data.timestamp &&
            new Date(data.timestamp).getTime() !==
                (this.state.timestamp && this.state.timestamp.getTime())) {
            this.state.timestamp = new Date(data.timestamp);
            updateReasons.push("dateCreated");
        }
        const updatedAttributes = index.parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);
        if (!isEqual__default['default'](this.state.attributes, updatedAttributes)) {
            this.state.attributes = updatedAttributes;
            updateReasons.push("attributes");
        }
        const updatedAggregatedDelivery = data.delivery;
        const currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;
        const isUpdatedAggregateDeliveryValid = !!updatedAggregatedDelivery &&
            !!updatedAggregatedDelivery.total &&
            !!updatedAggregatedDelivery.delivered &&
            !!updatedAggregatedDelivery.failed &&
            !!updatedAggregatedDelivery.read &&
            !!updatedAggregatedDelivery.sent &&
            !!updatedAggregatedDelivery.undelivered;
        if (isUpdatedAggregateDeliveryValid) {
            if (!currentAggregatedDelivery) {
                this.state.aggregatedDeliveryReceipt = new aggregatedDeliveryReceipt.AggregatedDeliveryReceipt(updatedAggregatedDelivery);
                updateReasons.push("deliveryReceipt");
            }
            else if (!currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)) {
                currentAggregatedDelivery._update(updatedAggregatedDelivery);
                updateReasons.push("deliveryReceipt");
            }
        }
        if (updateReasons.length > 0) {
            this.emit("updated", { message: this, updateReasons: updateReasons });
        }
    }
    /**
     * Get the participant who is the author of the message.
     */
    async getParticipant() {
        let participant = null;
        if (this.state.participantSid) {
            participant = await this.conversation
                .getParticipantBySid(this.state.participantSid)
                .catch(() => {
                log.debug(`Participant with sid "${this.participantSid}" not found for message ${this.sid}`);
                return null;
            });
        }
        if (!participant && this.state.author) {
            participant = await this.conversation
                .getParticipantByIdentity(this.state.author)
                .catch(() => {
                log.debug(`Participant with identity "${this.author}" not found for message ${this.sid}`);
                return null;
            });
        }
        if (participant) {
            return participant;
        }
        let errorMesage = "Participant with ";
        if (this.state.participantSid) {
            errorMesage += "SID '" + this.state.participantSid + "' ";
        }
        if (this.state.author) {
            if (this.state.participantSid) {
                errorMesage += "or ";
            }
            errorMesage += "identity '" + this.state.author + "' ";
        }
        if (errorMesage === "Participant with ") {
            errorMesage = "Participant ";
        }
        errorMesage += "was not found";
        throw new Error(errorMesage);
    }
    /**
     * Get the delivery receipts of the message.
     */
    async getDetailedDeliveryReceipts() {
        let paginator = await this._getDetailedDeliveryReceiptsPaginator();
        let detailedDeliveryReceipts = [];
        while (true) {
            detailedDeliveryReceipts = [
                ...detailedDeliveryReceipts,
                ...paginator.items,
            ];
            if (!paginator.hasNextPage) {
                break;
            }
            paginator = await paginator.nextPage();
        }
        return detailedDeliveryReceipts;
    }
    /**
     * Remove the message.
     */
    async remove() {
        await this.services.commandExecutor.mutateResource("delete", this.links.self);
        return this;
    }
    /**
     * Edit the message body.
     * @param body New body of the message.
     */
    async updateBody(body) {
        await this.services.commandExecutor.mutateResource("post", this.links.self, {
            body,
        });
        return this;
    }
    /**
     * Edit the message attributes.
     * @param attributes New attributes.
     */
    async updateAttributes(attributes) {
        await this.services.commandExecutor.mutateResource("post", this.links.self, {
            attributes: typeof attributes !== "undefined"
                ? JSON.stringify(attributes)
                : undefined,
        });
        return this;
    }
    /**
     * Get content URLs for all media attachments in the given set using single operation.
     * @param contentSet Set of media attachments to query for content URL.
     */
    async attachTemporaryUrlsFor(contentSet) {
        // We ignore existing mcsMedia members of each of the media entries.
        // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.
        const sids = contentSet === null || contentSet === void 0 ? void 0 : contentSet.map((m) => m.sid);
        if (this.services.mcsClient && sids) {
            return (await this.services.mcsClient.mediaSetGet(sids)).map((item) => {
                return new media.Media(item, this.services);
            });
        }
        else {
            throw new Error("Media Content Service is unavailable");
        }
    }
    async _getDetailedDeliveryReceiptsPaginator(options) {
        const messagesReceiptsUrl = this.configuration.links.messagesReceipts
            .replace("%s", this.conversation.sid)
            .replace("%s", this.sid);
        const url = new index.UriBuilder(messagesReceiptsUrl)
            .arg("PageToken", options === null || options === void 0 ? void 0 : options.pageToken)
            .arg("PageSize", options === null || options === void 0 ? void 0 : options.pageSize)
            .build();
        const response = await this.services.network.get(url);
        return new restPaginator.RestPaginator(response.body.delivery_receipts.map((x) => new detailedDeliveryReceipt.DetailedDeliveryReceipt(x)), (pageToken, pageSize) => this._getDetailedDeliveryReceiptsPaginator({ pageToken, pageSize }), response.body.meta.previous_token, response.body.meta.next_token);
    }
}
/**
 * Fired when the properties or the body of the message has been updated.
 *
 * Parameters:
 * 1. object `data` - info object provided with the event. It has the following properties:
 *     * {@link Message} message - the message in question
 *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update
 */
Message.updated = "updated";
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypes([declarativeTypeValidator.nonEmptyString, "undefined"]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object]),
    tslib_es6.__metadata("design:returntype", media.Media)
], Message.prototype, "getEmailBody", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypes([declarativeTypeValidator.nonEmptyString, "undefined"]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object]),
    tslib_es6.__metadata("design:returntype", media.Media)
], Message.prototype, "getEmailHistory", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync("string"),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String]),
    tslib_es6.__metadata("design:returntype", Promise)
], Message.prototype, "updateBody", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(attributes.attributesValidator),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], Message.prototype, "updateAttributes", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.custom((value) => [
        value instanceof Array &&
            value.length > 0 &&
            value.reduce((a, c) => a && c instanceof media.Media, true),
        "a non-empty array of Media",
    ])),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Array]),
    tslib_es6.__metadata("design:returntype", Promise)
], Message.prototype, "attachTemporaryUrlsFor", null);

exports.Message = Message;
//# sourceMappingURL=message.js.map
