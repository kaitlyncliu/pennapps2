{"version":3,"file":"typing-indicator.js","sources":["../../src/services/typing-indicator.ts"],"sourcesContent":["import { Logger } from \"../logger\";\n\nimport { Notifications } from \"@twilio/notifications\";\n\nimport { NotificationTypes } from \"../interfaces/notification-types\";\nimport { TwilsockClient } from \"twilsock\";\nimport { Configuration } from \"../configuration\";\n\nconst log = Logger.scope(\"TypingIndicator\");\n\nexport interface TypingIndicatorServices {\n  twilsockClient: TwilsockClient;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private readonly services: TypingIndicatorServices;\n  private readonly configuration: Configuration;\n\n  private sentUpdates: Map<string, number>;\n  private getConversation;\n  private serviceTypingTimeout;\n\n  constructor(\n    getConversation,\n    config: Configuration,\n    services: TypingIndicatorServices\n  ) {\n    this.configuration = config;\n    this.services = services;\n    this.getConversation = getConversation;\n\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return (\n      this.configuration.typingIndicatorTimeoutOverride ||\n      this.serviceTypingTimeout ||\n      this.configuration.typingIndicatorTimeoutDefault\n    );\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize(): void {\n    // this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');\n    this.services.notificationClient.on(\"message\", async (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        await this._handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote participants typing events handler\n   */\n  private async _handleRemoteTyping(message) {\n    log.trace(\"Got new typing indicator \", message);\n\n    this.getConversation(message.channel_sid)\n      .then((conversation) => {\n        if (!conversation) {\n          return;\n        }\n\n        conversation.participants.forEach((participant) => {\n          if (participant.identity !== message.identity) {\n            return;\n          }\n\n          const timeout = this.configuration.typingIndicatorTimeoutOverride\n            ? this.configuration.typingIndicatorTimeoutOverride + 1000\n            : message.typing_timeout * 1000;\n          participant._startTyping(timeout);\n        });\n      })\n      .catch((err) => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given conversation sid\n   * @param {String} conversationSid\n   */\n  send(conversationSid: string) {\n    const lastUpdate = this.sentUpdates.get(conversationSid);\n    if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(conversationSid, Date.now());\n    return this._send(conversationSid);\n  }\n\n  private _send(conversationSid: string) {\n    log.trace(\"Sending typing indicator\");\n\n    const url = this.configuration.links.typing;\n    const headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    };\n    const body = `ChannelSid=${conversationSid}`;\n\n    return this.services.twilsockClient\n      .post<{ typing_timeout: number }>(\n        url,\n        headers,\n        body,\n        this.configuration.productId\n      )\n      .then((response) => {\n        if (response.body.hasOwnProperty(\"typing_timeout\")) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      })\n      .catch((err) => {\n        log.error(\"Failed to send typing indicator:\", err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n"],"names":["Logger","NotificationTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAM,GAAG,GAAGA,aAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAO5C;;;;;;;;;;AAWA;;;;;;AAMA,MAAM,eAAe;IAQnB,YACE,eAAe,EACf,MAAqB,EACrB,QAAiC;QAEjC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAEvC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;KAC9B;IAED,IAAW,aAAa;QACtB,QACE,IAAI,CAAC,aAAa,CAAC,8BAA8B;YACjD,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,aAAa,CAAC,6BAA6B,EAChD;KACH;;;;;;IAOD,UAAU;;QAER,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,IAAI,EAAE,OAAO;YACjE,IAAI,IAAI,KAAKC,mCAAiB,CAAC,gBAAgB,EAAE;gBAC/C,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;aACzC;SACF,CAAC,CAAC;KACJ;;;;IAKO,MAAM,mBAAmB,CAAC,OAAO;QACvC,GAAG,CAAC,KAAK,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC;aACtC,IAAI,CAAC,CAAC,YAAY;YACjB,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO;aACR;YAED,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW;gBAC5C,IAAI,WAAW,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,EAAE;oBAC7C,OAAO;iBACR;gBAED,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,8BAA8B;sBAC7D,IAAI,CAAC,aAAa,CAAC,8BAA8B,GAAG,IAAI;sBACxD,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;gBAClC,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aACnC,CAAC,CAAC;SACJ,CAAC;aACD,KAAK,CAAC,CAAC,GAAG;YACT,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACf,MAAM,GAAG,CAAC;SACX,CAAC,CAAC;KACN;;;;;IAMD,IAAI,CAAC,eAAuB;QAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACzD,IAAI,UAAU,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE;YAC9D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;KACpC;IAEO,KAAK,CAAC,eAAuB;QACnC,GAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAEtC,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC;QAC5C,MAAM,OAAO,GAAG;YACd,cAAc,EAAE,mCAAmC;SACpD,CAAC;QACF,MAAM,IAAI,GAAG,cAAc,eAAe,EAAE,CAAC;QAE7C,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc;aAChC,IAAI,CACH,GAAG,EACH,OAAO,EACP,IAAI,EACJ,IAAI,CAAC,aAAa,CAAC,SAAS,CAC7B;aACA,IAAI,CAAC,CAAC,QAAQ;YACb,IAAI,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;gBAClD,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aACjE;SACF,CAAC;aACD,KAAK,CAAC,CAAC,GAAG;YACT,GAAG,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;YACnD,MAAM,GAAG,CAAC;SACX,CAAC,CAAC;KACN;;;;;"}