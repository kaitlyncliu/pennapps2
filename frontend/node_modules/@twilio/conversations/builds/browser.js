/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('isomorphic-form-data');
require('core-js/modules/es.reflect.construct.js');
require('core-js/modules/es.object.keys.js');
require('core-js/modules/es.symbol.js');
require('core-js/modules/es.array.filter.js');
require('core-js/modules/es.object.get-own-property-descriptor.js');
require('core-js/modules/es.object.get-own-property-descriptors.js');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/web.dom-collections.for-each.js');
require('core-js/modules/es.number.constructor.js');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var _typeof = require('@babel/runtime/helpers/typeof');
require('core-js/modules/es.array.concat.js');
require('core-js/modules/es.array.from.js');
require('core-js/modules/es.string.iterator.js');
var loglevelLog = require('loglevel');
var iso8601Duration = require('iso8601-duration');
require('core-js/modules/es.array.map.js');
require('core-js/modules/es.array.iterator.js');
require('core-js/modules/web.dom-collections.iterator.js');
require('core-js/modules/es.regexp.exec.js');
require('core-js/modules/es.string.replace.js');
require('core-js/modules/es.array.join.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
require('core-js/modules/es.array.includes.js');
var replayEventEmitter = require('@twilio/replay-event-emitter');
var isEqual = require('lodash.isequal');
require('core-js/modules/es.array.slice.js');
require('core-js/modules/es.function.name.js');
require('core-js/modules/es.symbol.description.js');
require('core-js/modules/es.symbol.iterator.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
require('core-js/modules/es.map.js');
var operationRetrier = require('@twilio/operation-retrier');
var twilsock = require('twilsock');
var notifications = require('@twilio/notifications');
var twilioSync = require('twilio-sync');
var mcsClient = require('@twilio/mcs-client');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
require('core-js/modules/es.set.js');
require('core-js/modules/es.number.is-integer.js');
require('core-js/modules/es.typed-array.uint8-array.js');
require('core-js/modules/es.typed-array.copy-within.js');
require('core-js/modules/es.typed-array.every.js');
require('core-js/modules/es.typed-array.fill.js');
require('core-js/modules/es.typed-array.filter.js');
require('core-js/modules/es.typed-array.find.js');
require('core-js/modules/es.typed-array.find-index.js');
require('core-js/modules/es.typed-array.for-each.js');
require('core-js/modules/es.typed-array.includes.js');
require('core-js/modules/es.typed-array.index-of.js');
require('core-js/modules/es.typed-array.iterator.js');
require('core-js/modules/es.typed-array.join.js');
require('core-js/modules/es.typed-array.last-index-of.js');
require('core-js/modules/es.typed-array.map.js');
require('core-js/modules/es.typed-array.reduce.js');
require('core-js/modules/es.typed-array.reduce-right.js');
require('core-js/modules/es.typed-array.reverse.js');
require('core-js/modules/es.typed-array.set.js');
require('core-js/modules/es.typed-array.slice.js');
require('core-js/modules/es.typed-array.some.js');
require('core-js/modules/es.typed-array.sort.js');
require('core-js/modules/es.typed-array.subarray.js');
require('core-js/modules/es.typed-array.to-locale-string.js');
require('core-js/modules/es.typed-array.to-string.js');
require('core-js/modules/es.array-buffer.constructor.js');
require('core-js/modules/es.array.sort.js');
require('core-js/modules/es.string.includes.js');
require('core-js/modules/es.array.find.js');
require('core-js/modules/es.array.splice.js');
require('core-js/modules/es.object.entries.js');
var uuid = require('uuid');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var loglevelLog__namespace = /*#__PURE__*/_interopNamespace(loglevelLog);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __metadata(metadataKey, metadataValue) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function prepareLine(prefix, args) {
  return ["".concat(new Date().toISOString(), " Conversations ").concat(prefix, ":")].concat(Array.from(args));
}

var log$9 = loglevelLog__namespace.getLogger("twilio-conversations"); // twilio-conversations is used by Flex SDK. Please DO NOT change

var Logger = /*#__PURE__*/function () {
  function Logger(prefix) {
    _classCallCheck__default['default'](this, Logger);

    _defineProperty__default['default'](this, "prefix", "");

    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0 ? prefix + " " : "";
  }

  _createClass__default['default'](Logger, [{
    key: "setLevel",
    value: function setLevel(level) {
      log$9.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      log$9.trace.apply(null, prepareLine(this.prefix + "T", args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      log$9.debug.apply(null, prepareLine(this.prefix + "D", args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      log$9.info.apply(null, prepareLine(this.prefix + "I", args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      log$9.warn.apply(null, prepareLine(this.prefix + "W", args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      log$9.error.apply(null, prepareLine(this.prefix + "E", args));
    }
  }], [{
    key: "scope",
    value: function scope(prefix) {
      return new Logger(prefix);
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      log$9.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      log$9.trace.apply(null, prepareLine("T", args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      log$9.debug.apply(null, prepareLine("D", args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      log$9.info.apply(null, prepareLine("I", args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      log$9.warn.apply(null, prepareLine("W", args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      log$9.error.apply(null, prepareLine("E", args));
    }
  }]);

  return Logger;
}();

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var TYPING_TIMEOUT = 5;
var HTTP_CACHE_LIFETIME = "PT5S";
var CONSUMPTION_HORIZON_SENDING_INTERVAL = "PT5S";
var USER_INFOS_TO_SUBSCRIBE = 100;
var MINIMUM_RETRY_DELAY = 1000;
var MAXIMUM_RETRY_DELAY = 4000;
var MAXIMUM_ATTEMPTS_COUNT = 3;
var RETRY_WHEN_THROTTLED = true;

var Configuration = function Configuration() {
  var _ref, _constructorOptions$u, _ref2, _constructorOptions$h, _ref3, _constructorOptions$c;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var configurationResponse = arguments.length > 1 ? arguments[1] : undefined;
  var logger = arguments.length > 2 ? arguments[2] : undefined;

  _classCallCheck__default['default'](this, Configuration);

  _defineProperty__default['default'](this, "typingIndicatorTimeoutDefault", TYPING_TIMEOUT * 1000);

  var constructorOptions = options.Chat || options.IPMessaging || options || {};
  this.productId = constructorOptions.productId;
  this.links = {
    myConversations: configurationResponse.links.my_conversations,
    conversations: configurationResponse.links.conversations,
    users: configurationResponse.links.users,
    currentUser: configurationResponse.links.current_user,
    typing: configurationResponse.links.typing,
    mediaService: configurationResponse.links.media_service,
    mediaSetService: configurationResponse.links.media_set_service,
    messagesReceipts: configurationResponse.links.messages_receipts
  };
  this.limits = {
    mediaAttachmentsCountLimit: configurationResponse.options.media_attachments_count_limit,
    mediaAttachmentSizeLimitInMb: configurationResponse.options.media_attachment_size_limit_in_mb,
    mediaAttachmentsTotalSizeLimitInMb: configurationResponse.options.media_attachments_total_size_limit_in_mb,
    emailHistoriesAllowedMimeTypes: configurationResponse.options.email_histories_allowed_mime_types,
    emailBodiesAllowedMimeTypes: configurationResponse.options.email_bodies_allowed_mime_types
  };
  this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;
  this.backoffConfiguration = _objectSpread$3({
    min: MINIMUM_RETRY_DELAY,
    max: MAXIMUM_RETRY_DELAY,
    maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
  }, constructorOptions.backoffConfigOverride);
  this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined ? constructorOptions.retryWhenThrottledOverride : RETRY_WHEN_THROTTLED;
  this.userInfosToSubscribe = (_ref = (_constructorOptions$u = constructorOptions.userInfosToSubscribeOverride) !== null && _constructorOptions$u !== void 0 ? _constructorOptions$u : configurationResponse.options.user_infos_to_subscribe) !== null && _ref !== void 0 ? _ref : USER_INFOS_TO_SUBSCRIBE;
  this.reachabilityEnabled = configurationResponse.options.reachability_enabled;
  this.userIdentity = configurationResponse.identity;
  this.userInfo = configurationResponse.sync_objects.my_user_info;
  this.myConversations = configurationResponse.sync_objects.my_conversations;
  var httpCacheInterval = (_ref2 = (_constructorOptions$h = constructorOptions.httpCacheIntervalOverride) !== null && _constructorOptions$h !== void 0 ? _constructorOptions$h : configurationResponse.options.http_cache_interval) !== null && _ref2 !== void 0 ? _ref2 : HTTP_CACHE_LIFETIME;

  try {
    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(httpCacheInterval));
  } catch (_unused) {
    logger.error("Failed to parse http cache interval ".concat(httpCacheInterval, ", using default value ").concat(HTTP_CACHE_LIFETIME));
    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(HTTP_CACHE_LIFETIME));
  }

  var consumptionReportInterval = (_ref3 = (_constructorOptions$c = constructorOptions.consumptionReportIntervalOverride) !== null && _constructorOptions$c !== void 0 ? _constructorOptions$c : configurationResponse.options.consumption_report_interval) !== null && _ref3 !== void 0 ? _ref3 : CONSUMPTION_HORIZON_SENDING_INTERVAL;

  try {
    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(consumptionReportInterval));
  } catch (_unused2) {
    logger.error("Failed to parse consumption report interval ".concat(consumptionReportInterval, ", using default value ").concat(CONSUMPTION_HORIZON_SENDING_INTERVAL));
    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(CONSUMPTION_HORIZON_SENDING_INTERVAL));
  }
};

/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function parseToNumber(value) {
  if (typeof value !== "undefined" && !isNaN(Number(value))) {
    return Number(value);
  }

  return null;
} // timeString cannot be typed `string` because in member.ts
// call to parseTime(data.lastReadTimestamp) uses number not a string for timestamp.


function parseTime$1(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}

function parseAttributes(rawAttributes, warningMessage, log) {
  var attributes = {};

  if (rawAttributes) {
    try {
      attributes = JSON.parse(rawAttributes);
    } catch (e) {
      log.warn(warningMessage, e);
    }
  }

  return attributes;
}
/**
 * Construct URI with query parameters
 */


var UriBuilder = /*#__PURE__*/function () {
  function UriBuilder(base) {
    _classCallCheck__default['default'](this, UriBuilder);

    this.base = base.replace(/\/$/, "");
    this.args = [];
    this.paths = [];
  }

  _createClass__default['default'](UriBuilder, [{
    key: "arg",
    value: function arg(name, value) {
      if (typeof value !== "undefined") {
        this.args.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
      }

      return this;
    }
  }, {
    key: "path",
    value: function path(name) {
      this.paths.push(encodeURIComponent(name));
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var result = this.base;

      if (this.paths.length) {
        result += "/" + this.paths.join("/");
      }

      if (this.args.length) {
        result += "?" + this.args.join("&");
      }

      return result;
    }
  }]);

  return UriBuilder;
}();

var attributesValidator = declarativeTypeValidator.custom(function (value) {
  return [["string", "number", "boolean", "object"].includes(_typeof__default['default'](value)), "a JSON type"];
});
var optionalAttributesValidator = declarativeTypeValidator.custom(function (value) {
  return [["undefined", "string", "number", "boolean", "object"].includes(_typeof__default['default'](value)), "an optional JSON type"];
});

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$8 = Logger.scope("User");
/**
 * Extended user information.
 * Note that `isOnline` and `isNotifiable` properties are eligible
 * for use only if the reachability function is enabled.
 * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.
 */

var User = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](User, _ReplayEventEmitter);

  var _super = _createSuper$8(User);

  /**
   * @internal
   */
  function User(identity, entityName, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, User);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "promiseToFetch", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "updated", "updated");

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "userSubscribed", "userSubscribed");

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "userUnsubscribed", "userUnsubscribed");

    _this.services = services;
    _this.subscribed = "initializing";

    _this.setMaxListeners(0);

    _this.state = {
      identity: identity,
      entityName: entityName,
      friendlyName: null,
      attributes: {},
      online: null,
      notifiable: null
    };
    _this._initializationPromise = new Promise(function (resolve) {
      _this._resolveInitializationPromise = resolve;
    });

    if (configuration !== null) {
      _this._resolveInitialization(configuration, identity, entityName, false);
    }

    return _this;
  }
  /**
   * Fired when the properties or the reachability status of the message has been updated.
   *
   * Parameters:
   * 1. object `data` - info object provided with the event. It has the following properties:
   *     * {@link User} `user` - the user in question
   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update
   * @event
   */


  _createClass__default['default'](User, [{
    key: "identity",
    get:
    /**
     * User identity.
     */
    function get() {
      return this.state.identity;
    },
    set: function set(identity) {
      this.state.identity = identity;
    }
  }, {
    key: "entityName",
    set: function set(name) {
      this.state.entityName = name;
    }
    /**
     * Custom attributes of the user.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Friendly name of the user, null if not set.
     */

  }, {
    key: "friendlyName",
    get: function get() {
      return this.state.friendlyName;
    }
    /**
     * Status of the real-time conversation connection of the user.
     */

  }, {
    key: "isOnline",
    get: function get() {
      return this.state.online;
    }
    /**
     * User push notification registration status.
     */

  }, {
    key: "isNotifiable",
    get: function get() {
      return this.state.notifiable;
    }
    /**
     * True if this user is receiving real-time status updates.
     */

  }, {
    key: "isSubscribed",
    get: function get() {
      return this.subscribed == "subscribed";
    } // Handles service updates

  }, {
    key: "_update",
    value: function () {
      var _update2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(key, value) {
        var updateReasons, updateAttributes;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._initializationPromise;

              case 2:
                updateReasons = [];
                log$8.debug("User for", this.state.identity, "updated:", key, value);
                _context.t0 = key;
                _context.next = _context.t0 === "friendlyName" ? 7 : _context.t0 === "attributes" ? 9 : _context.t0 === "reachability" ? 12 : 15;
                break;

              case 7:
                if (this.state.friendlyName !== value.value) {
                  updateReasons.push("friendlyName");
                  this.state.friendlyName = value.value;
                }

                return _context.abrupt("break", 16);

              case 9:
                updateAttributes = parseAttributes(value.value, "Retrieved malformed attributes from the server for user: ".concat(this.state.identity), log$8);

                if (!isEqual__default['default'](this.state.attributes, updateAttributes)) {
                  this.state.attributes = updateAttributes;
                  updateReasons.push("attributes");
                }

                return _context.abrupt("break", 16);

              case 12:
                if (this.state.online !== value.online) {
                  this.state.online = value.online;
                  updateReasons.push("reachabilityOnline");
                }

                if (this.state.notifiable !== value.notifiable) {
                  this.state.notifiable = value.notifiable;
                  updateReasons.push("reachabilityNotifiable");
                }

                return _context.abrupt("break", 16);

              case 15:
                return _context.abrupt("return");

              case 16:
                if (updateReasons.length > 0) {
                  this.emit("updated", {
                    user: this,
                    updateReasons: updateReasons
                  });
                }

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _update(_x, _x2) {
        return _update2.apply(this, arguments);
      }

      return _update;
    }() // Fetch reachability info

  }, {
    key: "_updateReachabilityInfo",
    value: function () {
      var _updateReachabilityInfo2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(map, update) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._initializationPromise;

              case 2:
                if (this.configuration.reachabilityEnabled) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve());

              case 4:
                return _context2.abrupt("return", map.get("reachability").then(update).catch(function (err) {
                  log$8.warn("Failed to get reachability info for ", _this2.state.identity, err);
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _updateReachabilityInfo(_x3, _x4) {
        return _updateReachabilityInfo2.apply(this, arguments);
      }

      return _updateReachabilityInfo;
    }() // Fetch user

  }, {
    key: "_fetch",
    value: function () {
      var _fetch2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var _this3 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._initializationPromise;

              case 2:
                if (this.state.entityName) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return", this);

              case 4:
                this.promiseToFetch = this.services.syncClient.map({
                  id: this.state.entityName,
                  mode: "open_existing",
                  includeItems: true
                }).then(function (map) {
                  _this3.entity = map;
                  map.on("itemUpdated", function (args) {
                    log$8.debug(_this3.state.entityName + " (" + _this3.state.identity + ") itemUpdated: " + args.item.key);
                    return _this3._update(args.item.key, args.item.data);
                  });
                  return Promise.all([map.get("friendlyName").then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), map.get("attributes").then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), _this3._updateReachabilityInfo(map, function (item) {
                    return _this3._update(item.key, item.data);
                  })]);
                }).then(function () {
                  log$8.debug("Fetched for", _this3.identity);
                  _this3.subscribed = "subscribed";

                  _this3.emit("userSubscribed", _this3);

                  return _this3;
                }).catch(function (err) {
                  _this3.promiseToFetch = null;
                  throw err;
                });
                return _context3.abrupt("return", this.promiseToFetch);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _fetch() {
        return _fetch2.apply(this, arguments);
      }

      return _fetch;
    }()
  }, {
    key: "_ensureFetched",
    value: function () {
      var _ensureFetched2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._initializationPromise;

              case 2:
                return _context4.abrupt("return", this.promiseToFetch || this._fetch());

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _ensureFetched() {
        return _ensureFetched2.apply(this, arguments);
      }

      return _ensureFetched;
    }()
    /**
     * Edit user attributes.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._initializationPromise;

              case 2:
                if (!(this.subscribed == "unsubscribed")) {
                  _context5.next = 4;
                  break;
                }

                throw new Error("Can't modify unsubscribed object");

              case 4:
                _context5.next = 6;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  attributes: JSON.stringify(attributes)
                });

              case 6:
                return _context5.abrupt("return", this);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function updateAttributes(_x5) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update the friendly name of the user.
     * @param friendlyName New friendly name.
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(friendlyName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._initializationPromise;

              case 2:
                if (!(this.subscribed == "unsubscribed")) {
                  _context6.next = 4;
                  break;
                }

                throw new Error("Can't modify unsubscribed object");

              case 4:
                _context6.next = 6;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  friendly_name: friendlyName
                });

              case 6:
                return _context6.abrupt("return", this);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function updateFriendlyName(_x6) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Remove the user from the subscription list.
     * @return A promise of completion.
     */

  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._initializationPromise;

              case 2:
                if (!this.promiseToFetch) {
                  _context7.next = 9;
                  break;
                }

                _context7.next = 5;
                return this.promiseToFetch;

              case 5:
                this.entity.close();
                this.promiseToFetch = null;
                this.subscribed = "unsubscribed";
                this.emit("userUnsubscribed", this);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }, {
    key: "_resolveInitialization",
    value: function _resolveInitialization(configuration, identity, entityName, emitUpdated) {
      this.configuration = configuration;
      this.identity = identity;
      this.entityName = entityName;
      this.links = {
        self: "".concat(this.configuration.links.users, "/").concat(this.identity)
      };

      this._resolveInitializationPromise();

      if (emitUpdated) {
        this.emit("updated", {
          user: this,
          updateReasons: ["friendlyName", "attributes", "reachabilityOnline", "reachabilityNotifiable"]
        });
      }
    }
  }]);

  return User;
}(replayEventEmitter.ReplayEventEmitter);

__decorate([declarativeTypeValidator.validateTypesAsync(attributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], User.prototype, "updateAttributes", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["string"]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], User.prototype, "updateFriendlyName", null);

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Network = /*#__PURE__*/function () {
  function Network(configuration, services) {
    _classCallCheck__default['default'](this, Network);

    this.configuration = configuration;
    this.services = services;
    this.cache = new Map();
    this.cacheLifetime = this.configuration.httpCacheInterval * 100;
    this.cleanupCache();
  }

  _createClass__default['default'](Network, [{
    key: "isExpired",
    value: function isExpired(timestamp) {
      return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;
    }
  }, {
    key: "cleanupCache",
    value: function cleanupCache() {
      var _iterator = _createForOfIteratorHelper$3(this.cache),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray__default['default'](_step.value, 2),
              k = _step$value[0],
              v = _step$value[1];

          if (this.isExpired(v.timestamp)) {
            this.cache.delete(k);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (this.cache.size === 0) {
        clearInterval(this.timer);
      }
    }
  }, {
    key: "pokeTimer",
    value: function pokeTimer() {
      var _this = this;

      this.timer = this.timer || setInterval(function () {
        return _this.cleanupCache();
      }, this.cacheLifetime * 2);
    }
  }, {
    key: "executeWithRetry",
    value: function executeWithRetry(request) {
      var _this2 = this;

      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return new Promise(function (resolve, reject) {
        var codesToRetryOn = [502, 503, 504];

        if (retryWhenThrottled) {
          codesToRetryOn.push(429);
        }

        var retrier = new operationRetrier.Retrier(_this2.configuration.backoffConfiguration);
        retrier.on("attempt", function () {
          request().then(function (result) {
            return retrier.succeeded(result);
          }).catch(function (err) {
            if (codesToRetryOn.indexOf(err.status) > -1) {
              retrier.failed(err);
            } else if (err.message === "Twilsock disconnected") {
              // Ugly hack. We must make a proper exceptions for twilsock
              retrier.failed(err);
            } else {
              // Fatal error
              retrier.removeAllListeners();
              retrier.cancel();
              reject(err);
            }
          });
        });
        retrier.on("succeeded", function (result) {
          resolve(result);
        });
        retrier.on("cancelled", function (err) {
          return reject(err);
        });
        retrier.on("failed", function (err) {
          return reject(err);
        });
        retrier.start();
      });
    }
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(url) {
        var _this3 = this;

        var cacheEntry, headers, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cacheEntry = this.cache.get(url);

                if (!(cacheEntry && !this.isExpired(cacheEntry.timestamp))) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", cacheEntry.response);

              case 3:
                headers = {};
                _context.next = 6;
                return this.executeWithRetry(function () {
                  return _this3.services.transport.get(url, headers, _this3.configuration.productId);
                }, this.configuration.retryWhenThrottled);

              case 6:
                response = _context.sent;
                this.cache.set(url, {
                  response: response,
                  timestamp: Date.now()
                });
                this.pokeTimer();
                return _context.abrupt("return", response);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return Network;
}();

var NotificationTypes = function NotificationTypes() {
  _classCallCheck__default['default'](this, NotificationTypes);
};

_defineProperty__default['default'](NotificationTypes, "TYPING_INDICATOR", "twilio.ipmsg.typing_indicator");

_defineProperty__default['default'](NotificationTypes, "NEW_MESSAGE", "twilio.conversations.new_message");

_defineProperty__default['default'](NotificationTypes, "ADDED_TO_CONVERSATION", "twilio.conversations.added_to_conversation");

_defineProperty__default['default'](NotificationTypes, "REMOVED_FROM_CONVERSATION", "twilio.conversations.removed_from_conversation");

_defineProperty__default['default'](NotificationTypes, "CONSUMPTION_UPDATE", "twilio.channel.consumption_update");

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$7 = Logger.scope("Participant");
/**
 * A participant represents a remote client in a conversation.
 */

var Participant = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Participant, _ReplayEventEmitter);

  var _super = _createSuper$7(Participant);

  /**
   * @internal
   */
  function Participant(data, sid, conversation, links, services) {
    var _data$roleSid, _data$bindings;

    var _this;

    _classCallCheck__default['default'](this, Participant);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.links = links;
    _this.services = services;
    _this.state = {
      attributes: parseAttributes(data.attributes, "Retrieved malformed attributes from the server for participant: " + sid, log$7),
      dateCreated: data.dateCreated ? parseTime$1(data.dateCreated) : null,
      dateUpdated: data.dateCreated ? parseTime$1(data.dateUpdated) : null,
      sid: sid,
      typingTimeout: null,
      isTyping: false,
      identity: data.identity,
      roleSid: (_data$roleSid = data.roleSid) !== null && _data$roleSid !== void 0 ? _data$roleSid : "",
      lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
      lastReadTimestamp: data.lastConsumptionTimestamp ? parseTime$1(data.lastConsumptionTimestamp) : null,
      type: data.type || "chat",
      userInfo: data.userInfo,
      bindings: (_data$bindings = data.bindings) !== null && _data$bindings !== void 0 ? _data$bindings : {}
    };

    if (!data.identity && !data.type) {
      throw new Error("Received invalid Participant object from server: Missing identity or type of Participant.");
    }

    return _this;
  }
  /**
   * Fired when the participant has started typing.
   *
   * Parameters:
   * 1. {@link Participant} `participant` - the participant in question
   * @event
   */


  _createClass__default['default'](Participant, [{
    key: "sid",
    get:
    /**
     * Conversation that the remote client is a participant of.
     */

    /**
     * The server-assigned unique identifier for the participant.
     */
    function get() {
      return this.state.sid;
    }
    /**
     * Custom attributes of the participant.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Date this participant was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.dateCreated;
    }
    /**
     * Date this participant was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
    /**
     * Identity of the participant.
     */

  }, {
    key: "identity",
    get: function get() {
      return this.state.identity;
    }
    /**
     * Indicates whether the participant is currently typing.
     */

  }, {
    key: "isTyping",
    get: function get() {
      return this.state.isTyping;
    }
    /**
     * The index of the last read message by the participant.
     * Note that retrieving messages on a client endpoint does not mean that messages are read,
     * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)
     * to find out about the proper way to mark messages as read.
     */

  }, {
    key: "lastReadMessageIndex",
    get: function get() {
      return this.state.lastReadMessageIndex;
    }
    /**
     * Date of the most recent read horizon update.
     */

  }, {
    key: "lastReadTimestamp",
    get: function get() {
      return this.state.lastReadTimestamp;
    }
  }, {
    key: "roleSid",
    get: function get() {
      return this.state.roleSid;
    }
    /**
     * Type of the participant.
     */

  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
    /**
     * Get the bindings mapping for the current participant.
     * Available binding depends on the participant type.
     * You could access it as `participant.bindings.sms?.address` or
     * using the type dynamically `participant.bindings[participant.type]`
     * just be aware that the binding information has different structure for
     * each participant type.
     * See also {ParticipantEmailBinding}, the only available currently binding descriptor.
     */

  }, {
    key: "bindings",
    get: function get() {
      var _this$state$bindings;

      return (_this$state$bindings = this.state.bindings) !== null && _this$state$bindings !== void 0 ? _this$state$bindings : {};
    }
  }, {
    key: "_startTyping",
    value:
    /**
     * Internal method used to start or reset the typing indicator timeout (with event emitting).
     * @internal
     */
    function _startTyping(timeout) {
      var _this2 = this;

      if (this.state.typingTimeout) {
        clearTimeout(this.state.typingTimeout);
      }

      this.state.isTyping = true;
      this.emit("typingStarted", this);
      this.conversation.emit("typingStarted", this);
      this.state.typingTimeout = Number(setTimeout(function () {
        return _this2._endTyping();
      }, timeout));
      return this;
    }
    /**
     * Internal method function used to stop the typing indicator timeout (with event emitting).
     * @internal
     */

  }, {
    key: "_endTyping",
    value: function _endTyping() {
      if (!this.state.typingTimeout) {
        return;
      }

      this.state.isTyping = false;
      this.emit("typingEnded", this);
      this.conversation.emit("typingEnded", this);
      clearInterval(this.state.typingTimeout);
      this.state.typingTimeout = null;
    }
    /**
     * Internal method function used update local object's property roleSid with a new value.
     * @internal
     */

  }, {
    key: "_update",
    value: function _update(data) {
      var updateReasons = [];
      var updateAttributes = parseAttributes(data.attributes, "Retrieved malformed attributes from the server for participant: " + this.state.sid, log$7);

      if (data.attributes && !isEqual__default['default'](this.state.attributes, updateAttributes)) {
        this.state.attributes = updateAttributes;
        updateReasons.push("attributes");
      }

      var updatedDateUpdated = parseTime$1(data.dateUpdated);

      if (data.dateUpdated && (updatedDateUpdated === null || updatedDateUpdated === void 0 ? void 0 : updatedDateUpdated.getTime()) !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
        this.state.dateUpdated = updatedDateUpdated;
        updateReasons.push("dateUpdated");
      }

      var updatedDateCreated = parseTime$1(data.dateCreated);

      if (data.dateCreated && (updatedDateCreated === null || updatedDateCreated === void 0 ? void 0 : updatedDateCreated.getTime()) !== (this.state.dateCreated && this.state.dateCreated.getTime())) {
        this.state.dateCreated = updatedDateCreated;
        updateReasons.push("dateCreated");
      }

      if (data.roleSid && this.state.roleSid !== data.roleSid) {
        this.state.roleSid = data.roleSid;
        updateReasons.push("roleSid");
      }

      if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null) && this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex) {
        this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;
        updateReasons.push("lastReadMessageIndex");
      }

      if (data.lastConsumptionTimestamp) {
        var lastReadTimestamp = new Date(data.lastConsumptionTimestamp);

        if (!this.state.lastReadTimestamp || this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()) {
          this.state.lastReadTimestamp = lastReadTimestamp;
          updateReasons.push("lastReadTimestamp");
        }
      }

      if (data.bindings && !isEqual__default['default'](this.state.bindings, data.bindings)) {
        this.state.bindings = data.bindings;
        updateReasons.push("bindings");
      }

      if (updateReasons.length > 0) {
        this.emit("updated", {
          participant: this,
          updateReasons: updateReasons
        });
      }

      return this;
    }
    /**
     * Get the user for this participant and subscribes to it. Supported only for participants of type `chat`.
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.type != "chat")) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Getting User is not supported for this Participant type: " + this.type);

              case 2:
                return _context.abrupt("return", this.services.users.getUser(this.state.identity, this.state.userInfo));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * Remove the participant from the conversation.
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.conversation.removeParticipant(this));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Update the attributes of the participant.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  attributes: JSON.stringify(attributes)
                });

              case 2:
                return _context3.abrupt("return", this);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateAttributes(_x) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
  }]);

  return Participant;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Participant, "typingStarted", "typingStarted");

_defineProperty__default['default'](Participant, "typingEnded", "typingEnded");

_defineProperty__default['default'](Participant, "updated", "updated");

__decorate([declarativeTypeValidator.validateTypesAsync(attributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Participant.prototype, "updateAttributes", null);

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$6 = Logger.scope("Participants");
/**
 * @classdesc Represents the collection of participants for the conversation
 * @fires Participants#participantJoined
 * @fires Participants#participantLeft
 * @fires Participants#participantUpdated
 */

var Participants = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Participants, _ReplayEventEmitter);

  var _super = _createSuper$6(Participants);

  function Participants(conversation, participants, links, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Participants);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "rosterEntityPromise", null);

    _this.conversation = conversation;
    _this.participants = participants;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    return _this;
  }

  _createClass__default['default'](Participants, [{
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.rosterEntityPromise) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.rosterEntityPromise;

              case 3:
                entity = _context.sent;
                entity.close();
                this.rosterEntityPromise = null;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }, {
    key: "subscribe",
    value: function subscribe(rosterObjectName) {
      var _this2 = this;

      return this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({
        id: rosterObjectName,
        mode: "open_existing"
      }).then(function (rosterMap) {
        rosterMap.on("itemAdded", function (args) {
          log$6.debug(_this2.conversation.sid + " itemAdded: " + args.item.key);

          _this2.upsertParticipant(args.item.key, args.item.data).then(function (participant) {
            _this2.emit("participantJoined", participant);
          });
        });
        rosterMap.on("itemRemoved", function (args) {
          log$6.debug(_this2.conversation.sid + " itemRemoved: " + args.key);
          var participantSid = args.key;

          if (!_this2.participants.has(participantSid)) {
            return;
          }

          var leftParticipant = _this2.participants.get(participantSid);

          _this2.participants.delete(participantSid);

          if (!leftParticipant) {
            return;
          }

          _this2.emit("participantLeft", leftParticipant);
        });
        rosterMap.on("itemUpdated", function (args) {
          log$6.debug(_this2.conversation.sid + " itemUpdated: " + args.item.key);

          _this2.upsertParticipant(args.item.key, args.item.data);
        });
        var participantsPromises = [];

        var rosterMapHandler = function rosterMapHandler(paginator) {
          paginator.items.forEach(function (item) {
            participantsPromises.push(_this2.upsertParticipant(item.key, item.data));
          });
          return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;
        };

        return rosterMap.getItems().then(rosterMapHandler).then(function () {
          return Promise.all(participantsPromises);
        }).then(function () {
          return rosterMap;
        });
      }).catch(function (err) {
        _this2.rosterEntityPromise = null;

        if (_this2.services.syncClient.connectionState != "disconnected") {
          log$6.error("Failed to get roster object for conversation", _this2.conversation.sid, err);
        }

        log$6.debug("ERROR: Failed to get roster object for conversation", _this2.conversation.sid, err);
        throw err;
      });
    }
  }, {
    key: "upsertParticipant",
    value: function () {
      var _upsertParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(participantSid, data) {
        var _this3 = this;

        var participant, links;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                participant = this.participants.get(participantSid);

                if (!participant) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", participant._update(data));

              case 3:
                links = {
                  self: "".concat(this.links.participants, "/").concat(participantSid)
                };
                participant = new Participant(data, participantSid, this.conversation, links, this.services);
                this.participants.set(participantSid, participant);
                participant.on("updated", function (args) {
                  return _this3.emit("participantUpdated", args);
                });
                return _context2.abrupt("return", participant);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function upsertParticipant(_x, _x2) {
        return _upsertParticipant.apply(this, arguments);
      }

      return upsertParticipant;
    }()
    /**
     * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}
     */

  }, {
    key: "getParticipants",
    value: function () {
      var _getParticipants = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var _this4 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.rosterEntityPromise ? this.rosterEntityPromise.then(function () {
                  var participants = [];

                  _this4.participants.forEach(function (participant) {
                    return participants.push(participant);
                  });

                  return participants;
                }) : []);

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getParticipants() {
        return _getParticipants.apply(this, arguments);
      }

      return getParticipants;
    }()
    /**
     * Get participant by SID from conversation
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantBySid",
    value: function () {
      var _getParticipantBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(participantSid) {
        var _this5 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this.rosterEntityPromise ? this.rosterEntityPromise.then(function () {
                  var participant = _this5.participants.get(participantSid);

                  if (!participant) {
                    throw new Error("Participant with SID " + participantSid + " was not found");
                  }

                  return participant;
                }) : null);

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getParticipantBySid(_x3) {
        return _getParticipantBySid.apply(this, arguments);
      }

      return getParticipantBySid;
    }()
    /**
     * Get participant by identity from conversation
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantByIdentity",
    value: function () {
      var _getParticipantByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(identity) {
        var _this6 = this;

        var foundParticipant;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                foundParticipant = null;
                return _context5.abrupt("return", this.rosterEntityPromise ? this.rosterEntityPromise.then(function () {
                  _this6.participants.forEach(function (participant) {
                    if (participant.identity === identity) {
                      foundParticipant = participant;
                    }
                  });

                  if (!foundParticipant) {
                    throw new Error("Participant with identity " + identity + " was not found");
                  }

                  return foundParticipant;
                }) : null);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getParticipantByIdentity(_x4) {
        return _getParticipantByIdentity.apply(this, arguments);
      }

      return getParticipantByIdentity;
    }()
    /**
     * Add a chat participant to the conversation
     * @returns {Promise<ParticipantResponse>}
     */

  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(identity, attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.participants, {
                  identity: identity,
                  attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context6.abrupt("return", _context6.sent);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function add(_x5, _x6) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
     * Add a non-chat participant to the conversation.
     *
     * @param proxyAddress
     * @param address
     * @param attributes
     * @param bindingOptions
     * @returns {Promise<any>}
     */

  }, {
    key: "addNonChatParticipant",
    value: function addNonChatParticipant(proxyAddress, address) {
      var _bindingOptions$email, _bindingOptions$email2;

      var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var bindingOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return this.services.commandExecutor.mutateResource("post", this.links.participants, {
        attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined,
        messaging_binding: {
          address: address,
          proxy_address: proxyAddress,
          name: bindingOptions === null || bindingOptions === void 0 ? void 0 : (_bindingOptions$email = bindingOptions.email) === null || _bindingOptions$email === void 0 ? void 0 : _bindingOptions$email.name,
          level: bindingOptions === null || bindingOptions === void 0 ? void 0 : (_bindingOptions$email2 = bindingOptions.email) === null || _bindingOptions$email2 === void 0 ? void 0 : _bindingOptions$email2.level
        }
      });
    }
    /**
     * Remove the participant with a given identity from a conversation.
     */

  }, {
    key: "remove",
    value: function remove(identity) {
      return this.services.commandExecutor.mutateResource("delete", "".concat(this.links.participants, "/").concat(identity));
    }
  }]);

  return Participants;
}(replayEventEmitter.ReplayEventEmitter);
/**
 * Fired when participant joined conversation
 * @event Participants#participantJoined
 * @type {Participant}
 */

/**
 * Fired when participant left conversation
 * @event Participants#participantLeft
 * @type {Participant}
 */

/**
 * Fired when participant updated
 * @event Participants#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */

/**
 * Represents a media information for a message in a conversation.
 */

var Media = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function Media(data, services) {
    _classCallCheck__default['default'](this, Media);

    _defineProperty__default['default'](this, "mcsMedia", null);

    this.services = services;

    if (data instanceof mcsClient.McsMedia) {
      this.mcsMedia = data;
    }

    this.state = {
      sid: data.sid,
      category: data.category,
      filename: data.filename,
      contentType: data.contentType,
      size: data.size
    };
  }
  /**
   * Server-assigned unique identifier for the media.
   */


  _createClass__default['default'](Media, [{
    key: "sid",
    get: function get() {
      return this.state.sid;
    }
    /**
     * File name. Null if absent.
     */

  }, {
    key: "filename",
    get: function get() {
      return this.state.filename;
    }
    /**
     * Content type of the media.
     */

  }, {
    key: "contentType",
    get: function get() {
      return this.state.contentType;
    }
    /**
     * Size of the media in bytes.
     */

  }, {
    key: "size",
    get: function get() {
      return this.state.size;
    }
    /**
     * Media category, can be one of the {@link MediaCategory} values.
     */

  }, {
    key: "category",
    get: function get() {
      return this.state.category;
    }
    /**
     * Returns the direct content URL for the media.
     *
     * This URL is impermanent, it will expire in several minutes and cannot be cached.
     * If the URL becomes expired, you need to request a new one.
     * Each call to this function produces a new temporary URL.
     */

  }, {
    key: "getContentTemporaryUrl",
    value: function () {
      var _getContentTemporaryUrl = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this$mcsMedia$getCon, _this$mcsMedia;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._fetchMcsMedia();

              case 2:
                return _context.abrupt("return", (_this$mcsMedia$getCon = (_this$mcsMedia = this.mcsMedia) === null || _this$mcsMedia === void 0 ? void 0 : _this$mcsMedia.getContentUrl()) !== null && _this$mcsMedia$getCon !== void 0 ? _this$mcsMedia$getCon : null);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getContentTemporaryUrl() {
        return _getContentTemporaryUrl.apply(this, arguments);
      }

      return getContentTemporaryUrl;
    }()
    /**
     * Returns cached direct content URL for the media.
     *
     * This URL will expire in several minutes. This function does not refresh the URL and can be used to query it several times
     * without causing network traffic.
     * If the URL becomes expired, you need to request a new one using getContentTemporaryUrl().
     *
     * @returns {Promise<String>}
     */

  }, {
    key: "getCachedTemporaryUrl",
    value: function () {
      var _getCachedTemporaryUrl = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var _this$mcsMedia$getCac, _this$mcsMedia2;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._fetchMcsMedia();

              case 2:
                return _context2.abrupt("return", (_this$mcsMedia$getCac = (_this$mcsMedia2 = this.mcsMedia) === null || _this$mcsMedia2 === void 0 ? void 0 : _this$mcsMedia2.getCachedContentUrl()) !== null && _this$mcsMedia$getCac !== void 0 ? _this$mcsMedia$getCac : null);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getCachedTemporaryUrl() {
        return _getCachedTemporaryUrl.apply(this, arguments);
      }

      return getCachedTemporaryUrl;
    }()
  }, {
    key: "_fetchMcsMedia",
    value: function () {
      var _fetchMcsMedia2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.mcsMedia) {
                  _context3.next = 8;
                  break;
                }

                if (!this.services.mcsClient) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 4;
                return this.services.mcsClient.get(this.state.sid);

              case 4:
                this.mcsMedia = _context3.sent;
                _context3.next = 8;
                break;

              case 7:
                throw new Error("Media Content Service is unavailable");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _fetchMcsMedia() {
        return _fetchMcsMedia2.apply(this, arguments);
      }

      return _fetchMcsMedia;
    }()
  }]);

  return Media;
}();

/**
 * Contains aggregated information about delivery statuses of a message across all participants
 * of a conversation.
 *
 * At any moment during the message delivery to a participant, the message can have zero or more of following
 * delivery statuses:
 * * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.
 * * Message is considered as **delivered** to a participant if Twilio has received confirmation of message
 * delivery from the upstream carrier, and, where available, the destination handset.
 * * Message considered as **undelivered** to a participant if Twilio has received a delivery receipt
 * indicating that the message was not delivered. This can happen for many reasons including carrier content
 * filtering and the availability of the destination handset.
 * * Message considered as **read** by a participant if the message has been delivered and opened by the
 * recipient in a conversation. The recipient must have enabled the read receipts.
 * * Message considered as **failed** to be delivered to a participant if the message could not be sent.
 * This can happen for various reasons including queue overflows, account suspensions and media
 * errors (in the case of MMS for instance).
 *
 * {@link AggregatedDeliveryReceipt} class contains an aggregated value {@link DeliveryAmount} for each delivery status.
 */
var AggregatedDeliveryReceipt = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function AggregatedDeliveryReceipt(data) {
    _classCallCheck__default['default'](this, AggregatedDeliveryReceipt);

    this.state = data;
  }
  /**
   * Maximum number of delivery events expected for the message.
   */


  _createClass__default['default'](AggregatedDeliveryReceipt, [{
    key: "total",
    get: function get() {
      return this.state.total;
    }
    /**
     * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.
     *
     * @return Amount of participants that have the **sent** delivery status for the message.
     */

  }, {
    key: "sent",
    get: function get() {
      return this.state.sent;
    }
    /**
     * Message is considered as **delivered** to a participant if Twilio has received confirmation of message
     * delivery from the upstream carrier, and, where available, the destination handset.
     *
     * @return Amount of participants that have the **delivered** delivery status for the message.
     */

  }, {
    key: "delivered",
    get: function get() {
      return this.state.delivered;
    }
    /**
     * Message is considered as **read** by a participant, if the message has been delivered and opened by the
     * recipient in a conversation. The recipient must have enabled the read receipts.
     *
     * @return Amount of participants that have the **read** delivery status for the message.
     */

  }, {
    key: "read",
    get: function get() {
      return this.state.read;
    }
    /**
     * Message is considered as **undelivered** to a participant if Twilio has received a delivery receipt
     * indicating that the message was not delivered. This can happen for many reasons including carrier content
     * filtering and the availability of the destination handset.
     *
     * @return Ammount of participants that have the **undelivered** delivery status for the message.
     */

  }, {
    key: "undelivered",
    get: function get() {
      return this.state.undelivered;
    }
    /**
     * Message is considered as **failed** to be delivered to a participant if the message could not be sent.
     * This can happen for various reasons including queue overflows, account suspensions and media
     * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.
     *
     * @return Amount of participants that have the **failed** delivery status for the message.
     */

  }, {
    key: "failed",
    get: function get() {
      return this.state.failed;
    }
  }, {
    key: "_update",
    value: function _update(data) {
      this.state = data;
    }
  }, {
    key: "_isEquals",
    value: function _isEquals(data) {
      var isTotalSame = this.total === data.total;
      var isSentSame = this.sent === data.sent;
      var isDeliveredSame = this.delivered === data.delivered;
      var isReadSame = this.read === data.read;
      var isUndeliveredSame = this.undelivered === data.undelivered;
      var isFailedSame = this.failed === data.failed;
      return isTotalSame && isSentSame && isDeliveredSame && isReadSame && isUndeliveredSame && isFailedSame;
    }
  }]);

  return AggregatedDeliveryReceipt;
}();

/**
 * Pagination helper class.
 */
var RestPaginator = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function RestPaginator(items, source, prevToken, nextToken) {
    _classCallCheck__default['default'](this, RestPaginator);

    this.state = {
      prevToken: prevToken,
      nextToken: nextToken,
      source: source,
      items: items
    };
  }
  /**
   * Request the next page. Does not modify the existing object.
   */


  _createClass__default['default'](RestPaginator, [{
    key: "hasNextPage",
    get:
    /**
     * Indicates the existence of the next page.
     */
    function get() {
      return !!this.state.nextToken;
    }
    /**
     * Indicates the existence of the previous page
     */

  }, {
    key: "hasPrevPage",
    get: function get() {
      return !!this.state.prevToken;
    }
    /**
     * Array of elements on the current page.
     */

  }, {
    key: "items",
    get: function get() {
      return this.state.items;
    }
  }, {
    key: "nextPage",
    value: function nextPage() {
      return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error("No next page"));
    }
    /**
     * Request the previous page. Does not modify the existing object.
     */

  }, {
    key: "prevPage",
    value: function prevPage() {
      return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error("No previous page"));
    }
  }]);

  return RestPaginator;
}();

/**
 * Represents a delivery receipt of a message.
 */
var DetailedDeliveryReceipt =
/**
 * Unique identifier for the delivery receipt.
 */

/**
 * Unique identifier for the message in the conversation.
 */

/**
 * Unique identifier for the conversation.
 */

/**
 * Unique identifier for the `â€˜channelâ€™` message (e.g., `WAxx` for WhatsApp, `SMxx` for SMS).
 */

/**
 * Unique identifier for the participant.
 */

/**
 * Status of the message delivery.
 */

/**
 * Numeric error code mapped from Status callback code. Information about the error codes can be found
 * [here](https://www.twilio.com/docs/sms/api/message-resource#delivery-related-errors).
 */

/**
 * Date this delivery receipt was created on.
 */

/**
 * Date this delivery receipt was last updated on.
 */

/**
 * @internal
 */
function DetailedDeliveryReceipt(descriptor) {
  _classCallCheck__default['default'](this, DetailedDeliveryReceipt);

  this.sid = descriptor.sid;
  this.messageSid = descriptor.message_sid;
  this.conversationSid = descriptor.conversation_sid;
  this.channelMessageSid = descriptor.channel_message_sid;
  this.participantSid = descriptor.participant_sid;
  this.status = descriptor.status || "queued";
  this.errorCode = descriptor.error_code || 0;
  this.dateCreated = descriptor.date_created;
  this.dateUpdated = descriptor.date_updated;
};

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$5 = Logger.scope("Message");
/**
 * A message in a conversation.
 */

var Message = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Message, _ReplayEventEmitter);

  var _super = _createSuper$5(Message);

  /**
   * Conversation that the message is in.
   */

  /**
   * @internal
   */
  function Message(index, data, conversation, links, configuration, services) {
    var _data$text, _data$lastUpdatedBy, _data$type, _data$memberSid;

    var _this;

    _classCallCheck__default['default'](this, Message);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    _this.state = {
      sid: data.sid,
      index: index,
      author: data.author,
      subject: data.subject,
      body: (_data$text = data.text) !== null && _data$text !== void 0 ? _data$text : null,
      timestamp: data.timestamp ? new Date(data.timestamp) : null,
      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
      lastUpdatedBy: (_data$lastUpdatedBy = data.lastUpdatedBy) !== null && _data$lastUpdatedBy !== void 0 ? _data$lastUpdatedBy : null,
      attributes: parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(data.sid), log$5),
      type: (_data$type = data.type) !== null && _data$type !== void 0 ? _data$type : "text",
      media: data.type && data.type === "media" && data.media ? new Media(data.media, _this.services) : null,
      medias: data.type && data.type === "media" && data.medias ? data.medias.map(function (m) {
        return new Media(m, _this.services);
      }) : null,
      participantSid: (_data$memberSid = data.memberSid) !== null && _data$memberSid !== void 0 ? _data$memberSid : null,
      aggregatedDeliveryReceipt: data.delivery ? new AggregatedDeliveryReceipt(data.delivery) : null
    };
    return _this;
  }
  /**
   * Fired when the properties or the body of the message has been updated.
   *
   * Parameters:
   * 1. object `data` - info object provided with the event. It has the following properties:
   *     * {@link Message} message - the message in question
   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update
   */


  _createClass__default['default'](Message, [{
    key: "sid",
    get:
    /**
     * The server-assigned unique identifier for the message.
     */
    function get() {
      return this.state.sid;
    }
    /**
     * Name of the user that sent the message.
     */

  }, {
    key: "author",
    get: function get() {
      return this.state.author;
    }
    /**
     * Message subject. Used only in email conversations.
     */

  }, {
    key: "subject",
    get: function get() {
      return this.state.subject;
    }
    /**
     * Body of the message.
     */

  }, {
    key: "body",
    get: function get() {
      return this.state.body;
    }
    /**
     * Date this message was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
    /**
     * Index of the message in the conversation's messages list.
     * By design of the Conversations system, the message indices may have arbitrary gaps between them,
     * that does not necessarily mean they were deleted or otherwise modified - just that
     * messages may have some non-contiguous indices even if they are being sent immediately one after another.
     *
     * Trying to use indices for some calculations is going to be unreliable.
     *
     * To calculate the number of unread messages it is better to use the read horizon API.
     * See {@link Conversation.getUnreadMessagesCount} for details.
     */

  }, {
    key: "index",
    get: function get() {
      return this.state.index;
    }
    /**
     * Identity of the last user that updated the message.
     */

  }, {
    key: "lastUpdatedBy",
    get: function get() {
      return this.state.lastUpdatedBy;
    }
    /**
     * Date this message was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.timestamp;
    }
    /**
     * Custom attributes of the message.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Type of the message.
     */

  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
    /**
     * One of the attached media (if present).
     * @deprecated Use attachedMedia instead. Note that the latter is now an array.
     */

  }, {
    key: "media",
    get: function get() {
      return this.state.media;
    }
    /**
     * Return all media attachments, except email body/history attachments, without temporary urls.
     */

  }, {
    key: "attachedMedia",
    get: function get() {
      return this.getMediaByCategory(["media"]);
    }
    /**
     * The server-assigned unique identifier of the authoring participant.
     */

  }, {
    key: "participantSid",
    get: function get() {
      return this.state.participantSid;
    }
    /**
     * Aggregated information about the message delivery statuses across all participants of a conversation..
     */

  }, {
    key: "aggregatedDeliveryReceipt",
    get: function get() {
      return this.state.aggregatedDeliveryReceipt;
    }
    /**
     * Return a (possibly empty) array of media matching a specific set of categories.
     * Allowed category is so far only 'media'.
     * @param categories Array of categories to match.
     * @returns Array of media descriptors matching given categories.
     */

  }, {
    key: "getMediaByCategory",
    value: function getMediaByCategory(categories) {
      var _this$state$medias;

      return ((_this$state$medias = this.state.medias) !== null && _this$state$medias !== void 0 ? _this$state$medias : []).filter(function (m) {
        return categories.includes(m.category);
      });
    }
    /**
     * Get a media descriptor for an email body attachment of a provided type.
     * Allowed body types are returned in the Conversation.limits().emailBodiesAllowedMimeTypes array.
     * @param type Type of email body to request, defaults to `text/plain`.
     */

  }, {
    key: "getEmailBody",
    value: function getEmailBody() {
      var _this$getMediaByCateg, _this$getMediaByCateg2;

      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "text/plain";
      return (_this$getMediaByCateg = (_this$getMediaByCateg2 = this.getMediaByCategory(["body"])) === null || _this$getMediaByCateg2 === void 0 ? void 0 : _this$getMediaByCateg2.filter(function (m) {
        return m.contentType == type;
      }).shift()) !== null && _this$getMediaByCateg !== void 0 ? _this$getMediaByCateg : null;
    }
    /**
     * Get a media descriptor for an email history attachment of a provided type.
     * Allowed body types are returned in the Conversation.limits().emailHistoriesAllowedMimeTypes array.
     * @param type Type of email history to request, defaults to `text/plain`.
     */

  }, {
    key: "getEmailHistory",
    value: function getEmailHistory() {
      var _this$getMediaByCateg3, _this$getMediaByCateg4;

      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "text/plain";
      return (_this$getMediaByCateg3 = (_this$getMediaByCateg4 = this.getMediaByCategory(["history"])) === null || _this$getMediaByCateg4 === void 0 ? void 0 : _this$getMediaByCateg4.filter(function (m) {
        return m.contentType == type;
      }).shift()) !== null && _this$getMediaByCateg3 !== void 0 ? _this$getMediaByCateg3 : null;
    }
  }, {
    key: "_update",
    value: function _update(data) {
      var updateReasons = [];

      if ((data.text || typeof data.text === "string") && data.text !== this.state.body) {
        this.state.body = data.text;
        updateReasons.push("body");
      }

      if (data.subject && data.subject !== this.state.subject) {
        this.state.subject = data.subject;
        updateReasons.push("subject");
      }

      if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
        this.state.lastUpdatedBy = data.lastUpdatedBy;
        updateReasons.push("lastUpdatedBy");
      }

      if (data.author && data.author !== this.state.author) {
        this.state.author = data.author;
        updateReasons.push("author");
      }

      if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
        this.state.dateUpdated = new Date(data.dateUpdated);
        updateReasons.push("dateUpdated");
      }

      if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {
        this.state.timestamp = new Date(data.timestamp);
        updateReasons.push("dateCreated");
      }

      var updatedAttributes = parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(this.sid), log$5);

      if (!isEqual__default['default'](this.state.attributes, updatedAttributes)) {
        this.state.attributes = updatedAttributes;
        updateReasons.push("attributes");
      }

      var updatedAggregatedDelivery = data.delivery;
      var currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;
      var isUpdatedAggregateDeliveryValid = !!updatedAggregatedDelivery && !!updatedAggregatedDelivery.total && !!updatedAggregatedDelivery.delivered && !!updatedAggregatedDelivery.failed && !!updatedAggregatedDelivery.read && !!updatedAggregatedDelivery.sent && !!updatedAggregatedDelivery.undelivered;

      if (isUpdatedAggregateDeliveryValid) {
        if (!currentAggregatedDelivery) {
          this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(updatedAggregatedDelivery);
          updateReasons.push("deliveryReceipt");
        } else if (!currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)) {
          currentAggregatedDelivery._update(updatedAggregatedDelivery);

          updateReasons.push("deliveryReceipt");
        }
      }

      if (updateReasons.length > 0) {
        this.emit("updated", {
          message: this,
          updateReasons: updateReasons
        });
      }
    }
    /**
     * Get the participant who is the author of the message.
     */

  }, {
    key: "getParticipant",
    value: function () {
      var _getParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this2 = this;

        var participant, errorMesage;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                participant = null;

                if (!this.state.participantSid) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return this.conversation.getParticipantBySid(this.state.participantSid).catch(function () {
                  log$5.debug("Participant with sid \"".concat(_this2.participantSid, "\" not found for message ").concat(_this2.sid));
                  return null;
                });

              case 4:
                participant = _context.sent;

              case 5:
                if (!(!participant && this.state.author)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return this.conversation.getParticipantByIdentity(this.state.author).catch(function () {
                  log$5.debug("Participant with identity \"".concat(_this2.author, "\" not found for message ").concat(_this2.sid));
                  return null;
                });

              case 8:
                participant = _context.sent;

              case 9:
                if (!participant) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", participant);

              case 11:
                errorMesage = "Participant with ";

                if (this.state.participantSid) {
                  errorMesage += "SID '" + this.state.participantSid + "' ";
                }

                if (this.state.author) {
                  if (this.state.participantSid) {
                    errorMesage += "or ";
                  }

                  errorMesage += "identity '" + this.state.author + "' ";
                }

                if (errorMesage === "Participant with ") {
                  errorMesage = "Participant ";
                }

                errorMesage += "was not found";
                throw new Error(errorMesage);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getParticipant() {
        return _getParticipant.apply(this, arguments);
      }

      return getParticipant;
    }()
    /**
     * Get the delivery receipts of the message.
     */

  }, {
    key: "getDetailedDeliveryReceipts",
    value: function () {
      var _getDetailedDeliveryReceipts = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var paginator, detailedDeliveryReceipts;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getDetailedDeliveryReceiptsPaginator();

              case 2:
                paginator = _context2.sent;
                detailedDeliveryReceipts = [];

              case 4:

                detailedDeliveryReceipts = [].concat(_toConsumableArray__default['default'](detailedDeliveryReceipts), _toConsumableArray__default['default'](paginator.items));

                if (paginator.hasNextPage) {
                  _context2.next = 8;
                  break;
                }

                return _context2.abrupt("break", 13);

              case 8:
                _context2.next = 10;
                return paginator.nextPage();

              case 10:
                paginator = _context2.sent;
                _context2.next = 4;
                break;

              case 13:
                return _context2.abrupt("return", detailedDeliveryReceipts);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getDetailedDeliveryReceipts() {
        return _getDetailedDeliveryReceipts.apply(this, arguments);
      }

      return getDetailedDeliveryReceipts;
    }()
    /**
     * Remove the message.
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.commandExecutor.mutateResource("delete", this.links.self);

              case 2:
                return _context3.abrupt("return", this);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Edit the message body.
     * @param body New body of the message.
     */

  }, {
    key: "updateBody",
    value: function () {
      var _updateBody = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(body) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  body: body
                });

              case 2:
                return _context4.abrupt("return", this);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateBody(_x) {
        return _updateBody.apply(this, arguments);
      }

      return updateBody;
    }()
    /**
     * Edit the message attributes.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context5.abrupt("return", this);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function updateAttributes(_x2) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Get content URLs for all media attachments in the given set using single operation.
     * @param contentSet Set of media attachments to query for content URL.
     */

  }, {
    key: "attachTemporaryUrlsFor",
    value: function () {
      var _attachTemporaryUrlsFor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(contentSet) {
        var _this3 = this;

        var sids;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // We ignore existing mcsMedia members of each of the media entries.
                // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.
                sids = contentSet === null || contentSet === void 0 ? void 0 : contentSet.map(function (m) {
                  return m.sid;
                });

                if (!(this.services.mcsClient && sids)) {
                  _context6.next = 7;
                  break;
                }

                _context6.next = 4;
                return this.services.mcsClient.mediaSetGet(sids);

              case 4:
                return _context6.abrupt("return", _context6.sent.map(function (item) {
                  return new Media(item, _this3.services);
                }));

              case 7:
                throw new Error("Media Content Service is unavailable");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function attachTemporaryUrlsFor(_x3) {
        return _attachTemporaryUrlsFor.apply(this, arguments);
      }

      return attachTemporaryUrlsFor;
    }()
  }, {
    key: "_getDetailedDeliveryReceiptsPaginator",
    value: function () {
      var _getDetailedDeliveryReceiptsPaginator2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(options) {
        var _this4 = this;

        var messagesReceiptsUrl, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                messagesReceiptsUrl = this.configuration.links.messagesReceipts.replace("%s", this.conversation.sid).replace("%s", this.sid);
                url = new UriBuilder(messagesReceiptsUrl).arg("PageToken", options === null || options === void 0 ? void 0 : options.pageToken).arg("PageSize", options === null || options === void 0 ? void 0 : options.pageSize).build();
                _context7.next = 4;
                return this.services.network.get(url);

              case 4:
                response = _context7.sent;
                return _context7.abrupt("return", new RestPaginator(response.body.delivery_receipts.map(function (x) {
                  return new DetailedDeliveryReceipt(x);
                }), function (pageToken, pageSize) {
                  return _this4._getDetailedDeliveryReceiptsPaginator({
                    pageToken: pageToken,
                    pageSize: pageSize
                  });
                }, response.body.meta.previous_token, response.body.meta.next_token));

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getDetailedDeliveryReceiptsPaginator(_x4) {
        return _getDetailedDeliveryReceiptsPaginator2.apply(this, arguments);
      }

      return _getDetailedDeliveryReceiptsPaginator;
    }()
  }]);

  return Message;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Message, "updated", "updated");

__decorate([declarativeTypeValidator.validateTypes([declarativeTypeValidator.nonEmptyString, "undefined"]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Media)], Message.prototype, "getEmailBody", null);

__decorate([declarativeTypeValidator.validateTypes([declarativeTypeValidator.nonEmptyString, "undefined"]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Media)], Message.prototype, "getEmailHistory", null);

__decorate([declarativeTypeValidator.validateTypesAsync("string"), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Message.prototype, "updateBody", null);

__decorate([declarativeTypeValidator.validateTypesAsync(attributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Message.prototype, "updateAttributes", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.custom(function (value) {
  return [value instanceof Array && value.length > 0 && value.reduce(function (a, c) {
    return a && c instanceof Media;
  }, true), "a non-empty array of Media"];
})), __metadata("design:type", Function), __metadata("design:paramtypes", [Array]), __metadata("design:returntype", Promise)], Message.prototype, "attachTemporaryUrlsFor", null);

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$4 = Logger.scope("Messages");
/**
 * Represents the collection of messages in a conversation
 */

var Messages = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Messages, _ReplayEventEmitter);

  var _super = _createSuper$4(Messages);

  function Messages(conversation, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Messages);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.configuration = configuration;
    _this.services = services;
    _this.messagesByIndex = new Map();
    _this.messagesListPromise = null;
    return _this;
  }
  /**
   * Subscribe to the Messages Event Stream
   * @param name - The name of Sync object for the Messages resource.
   */


  _createClass__default['default'](Messages, [{
    key: "subscribe",
    value: function () {
      var _subscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(name) {
        var _this2 = this;

        var list;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.messagesListPromise) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this.messagesListPromise);

              case 2:
                this.messagesListPromise = this.services.syncClient.list({
                  id: name,
                  mode: "open_existing"
                });
                _context.prev = 3;
                _context.next = 6;
                return this.messagesListPromise;

              case 6:
                list = _context.sent;
                list.on("itemAdded", function (args) {
                  log$4.debug("".concat(_this2.conversation.sid, " itemAdded: ").concat(args.item.index));
                  var links = {
                    self: "".concat(_this2.conversation.links.messages, "/").concat(args.item.data.sid),
                    conversation: _this2.conversation.links.self,
                    messages_receipts: "".concat(_this2.conversation.links.messages, "/").concat(args.item.data.sid, "/Receipts")
                  };
                  var message = new Message(args.item.index, args.item.data, _this2.conversation, links, _this2.configuration, _this2.services);

                  if (_this2.messagesByIndex.has(message.index)) {
                    log$4.debug("Message arrived, but is already known and ignored", _this2.conversation.sid, message.index);
                    return;
                  }

                  _this2.messagesByIndex.set(message.index, message);

                  message.on("updated", function (args) {
                    return _this2.emit("messageUpdated", args);
                  });

                  _this2.emit("messageAdded", message);
                });
                list.on("itemRemoved", function (args) {
                  log$4.debug("#{this.conversation.sid} itemRemoved: ".concat(args.index));
                  var index = args.index;

                  if (_this2.messagesByIndex.has(index)) {
                    var message = _this2.messagesByIndex.get(index);

                    if (!message) {
                      return;
                    }

                    _this2.messagesByIndex.delete(message.index);

                    message.removeAllListeners("updated");

                    _this2.emit("messageRemoved", message);
                  }
                });
                list.on("itemUpdated", function (args) {
                  log$4.debug("".concat(_this2.conversation.sid, " itemUpdated: ").concat(args.item.index));

                  var message = _this2.messagesByIndex.get(args.item.index);

                  if (message) {
                    message._update(args.item.data);
                  }
                });
                return _context.abrupt("return", list);

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](3);
                this.messagesListPromise = null;

                if (this.services.syncClient.connectionState !== "disconnected") {
                  log$4.error("Failed to get messages object for conversation", this.conversation.sid, _context.t0);
                }

                log$4.debug("ERROR: Failed to get messages object for conversation", this.conversation.sid, _context.t0);
                throw _context.t0;

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 13]]);
      }));

      function subscribe(_x) {
        return _subscribe.apply(this, arguments);
      }

      return subscribe;
    }()
  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.messagesListPromise) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.next = 4;
                return this.messagesListPromise;

              case 4:
                entity = _context2.sent;
                entity.close();
                this.messagesListPromise = null;

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
    /**
     * Send Message to the conversation, message could include both text and multiple media attachments.
     * @param message Message to post
     * @returns Returns a promise which can fail
     */

  }, {
    key: "sendV2",
    value: function () {
      var _sendV = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(message) {
        var _message$emailOptions;

        var media, _iterator, _step, _mediaContent$content, _mediaContent$media, _step$value, category, mediaContent;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                log$4.debug("Sending message V2", message.mediaContent, message.attributes, message.emailOptions);
                media = [];
                _iterator = _createForOfIteratorHelper$2(message.mediaContent);
                _context3.prev = 3;

                _iterator.s();

              case 5:
                if ((_step = _iterator.n()).done) {
                  _context3.next = 22;
                  break;
                }

                _step$value = _slicedToArray__default['default'](_step.value, 2), category = _step$value[0], mediaContent = _step$value[1];
                log$4.debug("Adding media to a message as ".concat(mediaContent instanceof FormData ? "FormData" : "SendMediaOptions"), mediaContent);
                _context3.t0 = media;

                if (!(mediaContent instanceof FormData)) {
                  _context3.next = 15;
                  break;
                }

                _context3.next = 12;
                return this.services.mcsClient.postFormData(mediaContent, category);

              case 12:
                _context3.t1 = _context3.sent;
                _context3.next = 18;
                break;

              case 15:
                _context3.next = 17;
                return this.services.mcsClient.post((_mediaContent$content = mediaContent.contentType) !== null && _mediaContent$content !== void 0 ? _mediaContent$content : "", (_mediaContent$media = mediaContent.media) !== null && _mediaContent$media !== void 0 ? _mediaContent$media : "", category, mediaContent.filename);

              case 17:
                _context3.t1 = _context3.sent;

              case 18:
                _context3.t2 = _context3.t1;

                _context3.t0.push.call(_context3.t0, _context3.t2);

              case 20:
                _context3.next = 5;
                break;

              case 22:
                _context3.next = 27;
                break;

              case 24:
                _context3.prev = 24;
                _context3.t3 = _context3["catch"](3);

                _iterator.e(_context3.t3);

              case 27:
                _context3.prev = 27;

                _iterator.f();

                return _context3.finish(27);

              case 30:
                _context3.next = 32;
                return this.services.commandExecutor.mutateResource("post", this.conversation.links.messages, {
                  body: message.text,
                  subject: (_message$emailOptions = message.emailOptions) === null || _message$emailOptions === void 0 ? void 0 : _message$emailOptions.subject,
                  media_sids: media.map(function (m) {
                    return m.sid;
                  }),
                  attributes: typeof message.attributes !== "undefined" ? JSON.stringify(message.attributes) : undefined
                });

              case 32:
                return _context3.abrupt("return", _context3.sent);

              case 33:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[3, 24, 27, 30]]);
      }));

      function sendV2(_x2) {
        return _sendV.apply(this, arguments);
      }

      return sendV2;
    }()
    /**
     * Send Message to the conversation
     * @param message Message to post
     * @param attributes Message attributes
     * @param emailOptions Options that modify E-mail integration behaviors.
     * @returns Returns promise which can fail
     */

  }, {
    key: "send",
    value: function () {
      var _send = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(message) {
        var attributes,
            emailOptions,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                attributes = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                emailOptions = _args4.length > 2 ? _args4[2] : undefined;
                log$4.debug("Sending text message", message, attributes, emailOptions);
                _context4.next = 5;
                return this.services.commandExecutor.mutateResource("post", this.conversation.links.messages, {
                  body: message !== null && message !== void 0 ? message : "",
                  attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined,
                  subject: emailOptions === null || emailOptions === void 0 ? void 0 : emailOptions.subject
                });

              case 5:
                return _context4.abrupt("return", _context4.sent);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function send(_x3) {
        return _send.apply(this, arguments);
      }

      return send;
    }()
    /**
     * Send Media Message to the conversation
     * @param mediaContent Media content to post
     * @param attributes Message attributes
     * @param emailOptions Email options
     * @returns Returns promise which can fail
     */

  }, {
    key: "sendMedia",
    value: function () {
      var _sendMedia = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(mediaContent) {
        var _mediaContent$content2, _mediaContent$media2;

        var attributes,
            emailOptions,
            media,
            _args5 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                attributes = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                emailOptions = _args5.length > 2 ? _args5[2] : undefined;
                log$4.debug("Sending media message", mediaContent, attributes, emailOptions);
                log$4.debug("Sending media message as ".concat(mediaContent instanceof FormData ? "FormData" : "SendMediaOptions"), mediaContent, attributes);

                if (!(mediaContent instanceof FormData)) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 7;
                return this.services.mcsClient.postFormData(mediaContent);

              case 7:
                _context5.t0 = _context5.sent;
                _context5.next = 13;
                break;

              case 10:
                _context5.next = 12;
                return this.services.mcsClient.post((_mediaContent$content2 = mediaContent.contentType) !== null && _mediaContent$content2 !== void 0 ? _mediaContent$content2 : "", (_mediaContent$media2 = mediaContent.media) !== null && _mediaContent$media2 !== void 0 ? _mediaContent$media2 : "", "media", mediaContent.filename);

              case 12:
                _context5.t0 = _context5.sent;

              case 13:
                media = _context5.t0;
                _context5.next = 16;
                return this.services.commandExecutor.mutateResource("post", this.conversation.links.messages, {
                  media_sids: [media.sid],
                  attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined
                });

              case 16:
                return _context5.abrupt("return", _context5.sent);

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sendMedia(_x4) {
        return _sendMedia.apply(this, arguments);
      }

      return sendMedia;
    }()
    /**
     * Returns messages from conversation using paginator interface
     * @param pageSize Number of messages to return in single chunk. By default it's 30.
     * @param anchor Most early message id which is already known, or 'end' by default
     * @param direction Pagination order 'backwards' or 'forward', 'forward' by default
     * @returns Last page of messages by default
     */

  }, {
    key: "getMessages",
    value: function () {
      var _getMessages2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(pageSize, anchor) {
        var direction,
            _args6 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                direction = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : "backwards";
                return _context6.abrupt("return", this._getMessages(pageSize, anchor, direction));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getMessages(_x5, _x6) {
        return _getMessages2.apply(this, arguments);
      }

      return getMessages;
    }()
  }, {
    key: "_wrapPaginator",
    value: function _wrapPaginator(order, page, op) {
      var _this3 = this;

      // Due to an inconsistency between Sync and Chat conventions, next and
      // previous pages should be swapped.
      var shouldReverse = order === "desc";

      var nextPage = function nextPage() {
        return page.nextPage().then(function (page) {
          return _this3._wrapPaginator(order, page, op);
        });
      };

      var previousPage = function previousPage() {
        return page.prevPage().then(function (page) {
          return _this3._wrapPaginator(order, page, op);
        });
      };

      return op(page.items).then(function (items) {
        return {
          items: items.sort(function (x, y) {
            return x.index - y.index;
          }),
          hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,
          hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,
          prevPage: shouldReverse ? nextPage : previousPage,
          nextPage: shouldReverse ? previousPage : nextPage
        };
      });
    }
  }, {
    key: "_upsertMessage",
    value: function _upsertMessage(index, value) {
      var _this4 = this;

      var cachedMessage = this.messagesByIndex.get(index);

      if (cachedMessage) {
        return cachedMessage;
      }

      var links = {
        self: "".concat(this.conversation.links.messages, "/").concat(value.sid),
        conversation: this.conversation.links.self,
        messages_receipts: "".concat(this.conversation.links.messages, "/").concat(value.sid, "/Receipts")
      };
      var message = new Message(index, value, this.conversation, links, this.configuration, this.services);
      this.messagesByIndex.set(message.index, message);
      message.on("updated", function (args) {
        return _this4.emit("messageUpdated", args);
      });
      return message;
    }
    /**
     * Returns last messages from conversation
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default
     * @private
     */

  }, {
    key: "_getMessages",
    value: function () {
      var _getMessages3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        var _this5 = this;

        var pageSize,
            anchor,
            direction,
            order,
            list,
            page,
            _args7 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                pageSize = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : 30;
                anchor = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : "end";
                direction = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : "forward";
                order = direction === "backwards" ? "desc" : "asc";
                _context7.next = 6;
                return this.messagesListPromise;

              case 6:
                list = _context7.sent;
                _context7.next = 9;
                return list === null || list === void 0 ? void 0 : list.getItems({
                  from: anchor !== "end" ? anchor : void 0,
                  pageSize: pageSize,
                  order: order,
                  limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.

                });

              case 9:
                page = _context7.sent;
                _context7.next = 12;
                return this._wrapPaginator(order, page, function (items) {
                  return Promise.all(items.map(function (item) {
                    return _this5._upsertMessage(item.index, item.data);
                  }));
                });

              case 12:
                return _context7.abrupt("return", _context7.sent);

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getMessages() {
        return _getMessages3.apply(this, arguments);
      }

      return _getMessages;
    }()
  }]);

  return Messages;
}(replayEventEmitter.ReplayEventEmitter);

/**
 * An unsent message. Returned from {@link MessageBuilder.build}.
 */

var UnsentMessage = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function UnsentMessage(messagesEntity) {
    _classCallCheck__default['default'](this, UnsentMessage);

    _defineProperty__default['default'](this, "attributes", {});

    _defineProperty__default['default'](this, "mediaContent", []);

    _defineProperty__default['default'](this, "emailOptions", {});

    this.messagesEntity = messagesEntity;
  }
  /**
   * Send the prepared message to the conversation.
   * @returns Index of the new message in the conversation.
   */


  _createClass__default['default'](UnsentMessage, [{
    key: "send",
    value: function () {
      var _send = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var response;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.messagesEntity.sendV2(this);

              case 2:
                response = _context.sent;
                return _context.abrupt("return", parseToNumber(response.index));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function send() {
        return _send.apply(this, arguments);
      }

      return send;
    }()
  }]);

  return UnsentMessage;
}();

/**
 * Message builder. Allows the message to be built and sent via method chaining.
 *
 * Example:
 *
 * ```ts
 * await testConversation.prepareMessage()
 *   .setBody('Hello!')
 *   .setAttributes({foo: 'bar'})
 *   .addMedia(media1)
 *   .addMedia(media2)
 *   .build()
 *   .send();
 * ```
 */

var MessageBuilder = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function MessageBuilder(limits, messagesEntity) {
    _classCallCheck__default['default'](this, MessageBuilder);

    this.limits = limits;
    this.message = new UnsentMessage(messagesEntity);
    this.emailBodies = new Map();
    this.emailHistories = new Map();
  }
  /**
   * Sets the message body.
   * @param text Contents of the body.
   */


  _createClass__default['default'](MessageBuilder, [{
    key: "setBody",
    value: function setBody(text) {
      this.message.text = text;
      return this;
    }
    /**
     * Sets the message subject.
     * @param subject Contents of the subject.
     */

  }, {
    key: "setSubject",
    value: function setSubject(subject) {
      this.message.emailOptions.subject = subject;
      return this;
    }
    /**
     * Sets the message attributes.
     * @param attributes Message attributes.
     */

  }, {
    key: "setAttributes",
    value: function setAttributes(attributes) {
      this.message.attributes = attributes;
      return this;
    }
    /**
     * Set email body with given MIME-type.
     * @param mimeType Format of the body to set (text/plain or text/html).
     * @param body Body payload in selected format.
     */

  }, {
    key: "setEmailBody",
    value: function setEmailBody(mimeType, body) {
      this.emailBodies.set(mimeType, body);
      return this;
    }
    /**
     * Set email history with given MIME-type.
     * @param mimeType Format of the history to set (text/plain or text/html).
     * @param history History payload in selected format.
     */

  }, {
    key: "setEmailHistory",
    value: function setEmailHistory(mimeType, history) {
      this.emailHistories.set(mimeType, history);
      return this;
    }
    /**
     * Adds media to the message.
     * @param payload Media to add.
     */

  }, {
    key: "addMedia",
    value: function addMedia(payload) {
      if (typeof FormData === "undefined" && payload instanceof FormData) {
        throw new Error("Could not add FormData content whilst not in a browser");
      }

      if (!(payload instanceof FormData)) {
        var mediaOptions = payload;

        if (!mediaOptions.contentType || !mediaOptions.media) {
          throw new Error("Media content in SendMediaOptions must contain non-empty contentType and media");
        }
      }

      this.message.mediaContent.push(["media", payload]);
      return this;
    }
    /**
     * Builds the message, making it ready to be sent.
     */

  }, {
    key: "build",
    value: function build() {
      var _this = this;

      this.emailBodies.forEach(function (_, key) {
        if (!_this.limits.emailBodiesAllowedMimeTypes.includes(key)) {
          throw new Error("Unsupported email body MIME type ".concat(key));
        }
      });
      this.emailHistories.forEach(function (_, key) {
        if (!_this.limits.emailHistoriesAllowedMimeTypes.includes(key)) {
          throw new Error("Unsupported email history MIME type ".concat(key));
        }
      });

      if (this.emailBodies.size > this.limits.emailBodiesAllowedMimeTypes.length) {
        throw new Error("Too many email bodies attached to the message (".concat(this.emailBodies.size, " > ").concat(this.limits.emailBodiesAllowedMimeTypes.length, ")"));
      }

      if (this.emailHistories.size > this.limits.emailHistoriesAllowedMimeTypes.length) {
        throw new Error("Too many email histories attached to the message (".concat(this.emailHistories.size, " > ").concat(this.limits.emailHistoriesAllowedMimeTypes.length, ")"));
      }

      if (this.message.mediaContent.length > this.limits.mediaAttachmentsCountLimit) {
        throw new Error("Too many media attachments in the message (".concat(this.message.mediaContent.length, " > ").concat(this.limits.mediaAttachmentsCountLimit, ")"));
      } // @todo we don't know the sizes of the attachments in FormData
      // @todo insertion below makes build() method non-repeatable - probably move to UnsentMessage.send() or even sendV2()?


      this.emailBodies.forEach(function (body) {
        _this.message.mediaContent.push(["body", body]);
      });
      this.emailHistories.forEach(function (history) {
        _this.message.mediaContent.push(["history", history]);
      });
      return this.message;
    }
  }, {
    key: "getPayloadContentType",
    value: function getPayloadContentType(payload) {
      if (typeof FormData !== "undefined" && payload instanceof FormData) {
        return payload.get("Content-Type");
      }

      return payload.contentType;
    }
  }]);

  return MessageBuilder;
}();

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$3 = Logger.scope("Conversation");
var fieldMappings = {
  lastMessage: "lastMessage",
  attributes: "attributes",
  createdBy: "createdBy",
  dateCreated: "dateCreated",
  dateUpdated: "dateUpdated",
  friendlyName: "friendlyName",
  lastConsumedMessageIndex: "lastConsumedMessageIndex",
  notificationLevel: "notificationLevel",
  sid: "sid",
  status: "status",
  uniqueName: "uniqueName",
  state: "state",
  bindings: "bindings"
};

function parseTime(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}
/**
 * A conversation represents communication between multiple Conversations clients
 */


var Conversation = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Conversation, _ReplayEventEmitter);

  var _super = _createSuper$3(Conversation);

  /**
   * Unique system identifier of the conversation.
   */

  /**
   * @internal
   */
  function Conversation(descriptor, sid, links, configuration, services) {
    var _descriptor$bindings;

    var _this;

    _classCallCheck__default['default'](this, Conversation);

    _this = _super.call(this);
    _this.sid = sid;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    var attributes = descriptor.attributes || {};
    var createdBy = descriptor.createdBy;
    var dateCreated = parseTime(descriptor.dateCreated);
    var dateUpdated = parseTime(descriptor.dateUpdated);
    var friendlyName = descriptor.friendlyName || null;
    var lastReadMessageIndex = Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;
    var uniqueName = descriptor.uniqueName || null;

    try {
      JSON.stringify(attributes);
    } catch (e) {
      throw new Error("Attributes must be a valid JSON object.");
    }

    _this.entityName = descriptor.channel;
    _this.channelState = {
      uniqueName: uniqueName,
      status: "notParticipating",
      attributes: attributes,
      createdBy: createdBy,
      dateCreated: dateCreated,
      dateUpdated: dateUpdated,
      friendlyName: friendlyName,
      lastReadMessageIndex: lastReadMessageIndex,
      bindings: (_descriptor$bindings = descriptor.bindings) !== null && _descriptor$bindings !== void 0 ? _descriptor$bindings : {}
    };

    if (descriptor.notificationLevel) {
      _this.channelState.notificationLevel = descriptor.notificationLevel;
    }

    var participantsLinks = {
      participants: _this.links.participants
    };
    _this.participants = new Map();
    _this.participantsEntity = new Participants(_assertThisInitialized__default['default'](_this), _this.participants, participantsLinks, _this.configuration, _this.services);

    _this.participantsEntity.on("participantJoined", function (participant) {
      return _this.emit("participantJoined", participant);
    });

    _this.participantsEntity.on("participantLeft", function (participant) {
      return _this.emit("participantLeft", participant);
    });

    _this.participantsEntity.on("participantUpdated", function (args) {
      return _this.emit("participantUpdated", args);
    });

    _this.messagesEntity = new Messages(_assertThisInitialized__default['default'](_this), configuration, services);

    _this.messagesEntity.on("messageAdded", function (message) {
      return _this._onMessageAdded(message);
    });

    _this.messagesEntity.on("messageUpdated", function (args) {
      return _this.emit("messageUpdated", args);
    });

    _this.messagesEntity.on("messageRemoved", function (message) {
      return _this.emit("messageRemoved", message);
    });

    return _this;
  }
  /**
   * Fired when a participant has joined the conversation.
   *
   * Parameters:
   * 1. {@link Participant} `participant` - participant that joined the conversation
   * @event
   */


  _createClass__default['default'](Conversation, [{
    key: "uniqueName",
    get:
    /**
     * Unique name of the conversation.
     */
    function get() {
      return this.channelState.uniqueName;
    }
    /**
     * Status of the conversation.
     */

  }, {
    key: "status",
    get: function get() {
      return this.channelState.status;
    }
    /**
     * Name of the conversation.
     */

  }, {
    key: "friendlyName",
    get: function get() {
      return this.channelState.friendlyName;
    }
    /**
     * Date this conversation was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.channelState.dateUpdated;
    }
    /**
     * Date this conversation was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.channelState.dateCreated;
    }
    /**
     * Identity of the user that created this conversation.
     */

  }, {
    key: "createdBy",
    get: function get() {
      var _this$channelState$cr;

      return (_this$channelState$cr = this.channelState.createdBy) !== null && _this$channelState$cr !== void 0 ? _this$channelState$cr : "";
    }
    /**
     * Custom attributes of the conversation.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.channelState.attributes;
    }
    /**
     * Index of the last message the user has read in this conversation.
     */

  }, {
    key: "lastReadMessageIndex",
    get: function get() {
      return this.channelState.lastReadMessageIndex;
    }
    /**
     * Last message sent to this conversation.
     */

  }, {
    key: "lastMessage",
    get: function get() {
      var _this$channelState$la;

      return (_this$channelState$la = this.channelState.lastMessage) !== null && _this$channelState$la !== void 0 ? _this$channelState$la : undefined;
    }
    /**
     * User notification level for this conversation.
     */

  }, {
    key: "notificationLevel",
    get: function get() {
      var _this$channelState$no;

      return (_this$channelState$no = this.channelState.notificationLevel) !== null && _this$channelState$no !== void 0 ? _this$channelState$no : "default";
    }
  }, {
    key: "bindings",
    get: function get() {
      return this.channelState.bindings;
    }
    /**
     * Current conversation limits.
     */

  }, {
    key: "limits",
    get: function get() {
      return this.configuration.limits;
    }
    /**
     * State of the conversation.
     */

  }, {
    key: "state",
    get: function get() {
      return this.channelState.state;
    }
    /**
     * Load and subscribe to this conversation and do not subscribe to its participants and messages.
     * This or _subscribeStreams will need to be called before any events on conversation will fire.
     * @internal
     */

  }, {
    key: "_subscribe",
    value: function _subscribe() {
      var _this$entityPromise,
          _this2 = this;

      return this.entityPromise = (_this$entityPromise = this.entityPromise) !== null && _this$entityPromise !== void 0 ? _this$entityPromise : this.services.syncClient.document({
        id: this.entityName,
        mode: "open_existing"
      }).then(function (entity) {
        _this2.entity = entity;

        _this2.entity.on("updated", function (args) {
          _this2._update(args.data);
        });

        _this2.entity.on("removed", function () {
          return _this2.emit("removed", _this2);
        });

        _this2._update(_this2.entity.data);

        return entity;
      }).catch(function (err) {
        _this2.entity = null;
        _this2.entityPromise = null;

        if (_this2.services.syncClient.connectionState != "disconnected") {
          log$3.error("Failed to get conversation object", err);
        }

        log$3.debug("ERROR: Failed to get conversation object", err);
        throw err;
      });
    }
    /**
     * Load the attributes of this conversation and instantiate its participants and messages.
     * This or _subscribe will need to be called before any events on the conversation will fire.
     * This will need to be called before any events on participants or messages will fire
     * @internal
     */

  }, {
    key: "_subscribeStreams",
    value: function () {
      var _subscribeStreams2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this$entity, _this$entity2, _this$entity3, messagesObjectName, rosterObjectName;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this._subscribe();

              case 3:
                log$3.trace("_subscribeStreams, this.entity.data=", (_this$entity = this.entity) === null || _this$entity === void 0 ? void 0 : _this$entity.data);
                messagesObjectName = (_this$entity2 = this.entity) === null || _this$entity2 === void 0 ? void 0 : _this$entity2.data.messages;
                rosterObjectName = (_this$entity3 = this.entity) === null || _this$entity3 === void 0 ? void 0 : _this$entity3.data.roster;
                _context.next = 8;
                return Promise.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);

              case 8:
                _context.next = 15;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](0);

                if (this.services.syncClient.connectionState !== "disconnected") {
                  log$3.error("Failed to subscribe on conversation objects", this.sid, _context.t0);
                }

                log$3.debug("ERROR: Failed to subscribe on conversation objects", this.sid, _context.t0);
                throw _context.t0;

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 10]]);
      }));

      function _subscribeStreams() {
        return _subscribeStreams2.apply(this, arguments);
      }

      return _subscribeStreams;
    }()
    /**
     * Stop listening for and firing events on this conversation.
     * @internal
     */

  }, {
    key: "_unsubscribe",
    value: function () {
      var _unsubscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.entity) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 3;
                return this.entity.close();

              case 3:
                this.entity = null;
                this.entityPromise = null;

              case 5:
                return _context2.abrupt("return", Promise.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _unsubscribe() {
        return _unsubscribe2.apply(this, arguments);
      }

      return _unsubscribe;
    }()
    /**
     * Set conversation status.
     * @internal
     */

  }, {
    key: "_setStatus",
    value: function _setStatus(status, source) {
      var _this3 = this;

      this.statusSource = source;

      if (this.channelState.status === status) {
        return;
      }

      this.channelState.status = status;

      if (status === "joined") {
        this._subscribeStreams().catch(function (err) {
          log$3.debug("ERROR while setting conversation status " + status, err);

          if (_this3.services.syncClient.connectionState !== "disconnected") {
            throw err;
          }
        });
      } else if (this.entityPromise) {
        this._unsubscribe().catch(function (err) {
          log$3.debug("ERROR while setting conversation status " + status, err);

          if (_this3.services.syncClient.connectionState !== "disconnected") {
            throw err;
          }
        });
      }
    }
    /**
     * Get the source of the conversation update.
     * @internal
     */

  }, {
    key: "_statusSource",
    value: function _statusSource() {
      return this.statusSource;
    }
  }, {
    key: "_update",
    value:
    /**
     * Update the local conversation object with new values.
     * @internal
     */
    function _update(update) {
      var _update$lastMessage, _update$lastMessage2, _this$channelState$la2, _this$channelState$la3, _this$channelState$lo;

      log$3.trace("_update", update);
      Conversation.preprocessUpdate(update, this.sid);
      var updateReasons = new Set();

      for (var _i = 0, _Object$keys = Object.keys(update); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        var localKey = fieldMappings[key];

        if (!localKey) {
          continue;
        }

        switch (localKey) {
          case fieldMappings.status:
            if (!update.status || update.status === "unknown" || this.channelState.status === update.status) {
              break;
            }

            this.channelState.status = update.status;
            updateReasons.add(localKey);
            break;

          case fieldMappings.attributes:
            if (isEqual__default['default'](this.channelState.attributes, update.attributes)) {
              break;
            }

            this.channelState.attributes = update.attributes;
            updateReasons.add(localKey);
            break;

          case fieldMappings.lastConsumedMessageIndex:
            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastReadMessageIndex) {
              break;
            }

            this.channelState.lastReadMessageIndex = update.lastConsumedMessageIndex;
            updateReasons.add("lastReadMessageIndex");
            break;

          case fieldMappings.lastMessage:
            if (this.channelState.lastMessage && !update.lastMessage) {
              delete this.channelState.lastMessage;
              updateReasons.add(localKey);
              break;
            }

            this.channelState.lastMessage = this.channelState.lastMessage || {};

            if (((_update$lastMessage = update.lastMessage) === null || _update$lastMessage === void 0 ? void 0 : _update$lastMessage.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {
              this.channelState.lastMessage.index = update.lastMessage.index;
              updateReasons.add(localKey);
            }

            if (((_update$lastMessage2 = update.lastMessage) === null || _update$lastMessage2 === void 0 ? void 0 : _update$lastMessage2.timestamp) !== undefined && ((_this$channelState$la2 = this.channelState.lastMessage) === null || _this$channelState$la2 === void 0 ? void 0 : (_this$channelState$la3 = _this$channelState$la2.dateCreated) === null || _this$channelState$la3 === void 0 ? void 0 : _this$channelState$la3.getTime()) !== update.lastMessage.timestamp.getTime()) {
              this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;
              updateReasons.add(localKey);
            }

            if (isEqual__default['default'](this.channelState.lastMessage, {})) {
              delete this.channelState.lastMessage;
            }

            break;

          case fieldMappings.state:
            var state = update.state || undefined;

            if (state !== undefined) {
              state.dateUpdated = new Date(state.dateUpdated);
            }

            if (isEqual__default['default'](this.channelState.state, state)) {
              break;
            }

            this.channelState.state = state;
            updateReasons.add(localKey);
            break;

          case fieldMappings.bindings:
            if (isEqual__default['default'](this.channelState.bindings, update.bindings)) {
              break;
            }

            this.channelState.bindings = update.bindings;
            updateReasons.add(localKey);
            break;

          default:
            var isDate = update[key] instanceof Date;
            var keysMatchAsDates = isDate && ((_this$channelState$lo = this.channelState[localKey]) === null || _this$channelState$lo === void 0 ? void 0 : _this$channelState$lo.getTime()) === update[key].getTime();
            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];

            if (keysMatchAsDates || keysMatchAsNonDates) {
              break;
            }

            this.channelState[localKey] = update[key];
            updateReasons.add(localKey);
        }
      }

      if (updateReasons.size > 0) {
        this.emit("updated", {
          conversation: this,
          updateReasons: _toConsumableArray__default['default'](updateReasons)
        });
      }
    }
    /**
     * @internal
     */

  }, {
    key: "_onMessageAdded",
    value: function _onMessageAdded(message) {
      var _iterator = _createForOfIteratorHelper$1(this.participants.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var participant = _step.value;

          if (participant.identity === message.author) {
            participant._endTyping();

            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.emit("messageAdded", message);
    }
  }, {
    key: "_setLastReadMessageIndex",
    value: function () {
      var _setLastReadMessageIndex2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(index) {
        var result;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.commandExecutor.mutateResource("post", "".concat(this.configuration.links.myConversations, "/").concat(this.sid), {
                  last_read_message_index: index
                });

              case 2:
                result = _context3.sent;
                return _context3.abrupt("return", result.unread_messages_count);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _setLastReadMessageIndex(_x) {
        return _setLastReadMessageIndex2.apply(this, arguments);
      }

      return _setLastReadMessageIndex;
    }()
    /**
     * Add a participant to the conversation by its identity.
     * @param identity Identity of the Client to add.
     * @param attributes Attributes to be attached to the participant.
     */

  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(identity, attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this.participantsEntity.add(identity, attributes !== null && attributes !== void 0 ? attributes : {}));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function add(_x2, _x3) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
     * Add a non-chat participant to the conversation.
     * @param proxyAddress Proxy (Twilio) address of the participant.
     * @param address User address of the participant.
     * @param attributes Attributes to be attached to the participant.
     * @param bindingOptions Options for adding email participants - name and CC/To level.
     */

  }, {
    key: "addNonChatParticipant",
    value: function () {
      var _addNonChatParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(proxyAddress, address) {
        var attributes,
            bindingOptions,
            _args5 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                attributes = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                bindingOptions = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                return _context5.abrupt("return", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes !== null && attributes !== void 0 ? attributes : {}, bindingOptions !== null && bindingOptions !== void 0 ? bindingOptions : {}));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function addNonChatParticipant(_x4, _x5) {
        return _addNonChatParticipant.apply(this, arguments);
      }

      return addNonChatParticipant;
    }()
    /**
     * Advance the conversation's last read message index to the current read horizon.
     * Rejects if the user is not a participant of the conversation.
     * Last read message index is updated only if the new index value is higher than the previous.
     * @param index Message index to advance to.
     * @return Resulting unread messages count in the conversation.
     */

  }, {
    key: "advanceLastReadMessageIndex",
    value: function () {
      var _advanceLastReadMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._subscribeStreams();

              case 2:
                if (!(index < (this.lastReadMessageIndex || 0))) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 5;
                return this._setLastReadMessageIndex(this.lastReadMessageIndex);

              case 5:
                return _context6.abrupt("return", _context6.sent);

              case 6:
                _context6.next = 8;
                return this._setLastReadMessageIndex(index);

              case 8:
                return _context6.abrupt("return", _context6.sent);

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function advanceLastReadMessageIndex(_x6) {
        return _advanceLastReadMessageIndex.apply(this, arguments);
      }

      return advanceLastReadMessageIndex;
    }()
    /**
     * Delete the conversation and unsubscribe from its events.
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.services.commandExecutor.mutateResource("delete", this.links.self);

              case 2:
                return _context7.abrupt("return", this);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Get the custom attributes of this Conversation.
     */

  }, {
    key: "getAttributes",
    value: function () {
      var _getAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8() {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._subscribe();

              case 2:
                return _context8.abrupt("return", this.attributes);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getAttributes() {
        return _getAttributes.apply(this, arguments);
      }

      return getAttributes;
    }()
    /**
     * Returns messages from the conversation using the paginator interface.
     * @param pageSize Number of messages to return in a single chunk. Default is 30.
     * @param anchor Index of the newest message to fetch. Default is from the end.
     * @param direction Query direction. By default it queries backwards
     * from newer to older. The `"forward"` value will query in the opposite direction.
     * @return A page of messages.
     */

  }, {
    key: "getMessages",
    value: function () {
      var _getMessages = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(pageSize, anchor, direction) {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context9.abrupt("return", this.messagesEntity.getMessages(pageSize, anchor, direction));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getMessages(_x7, _x8, _x9) {
        return _getMessages.apply(this, arguments);
      }

      return getMessages;
    }()
    /**
     * Get a list of all the participants who are joined to this conversation.
     */

  }, {
    key: "getParticipants",
    value: function () {
      var _getParticipants = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10() {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context10.abrupt("return", this.participantsEntity.getParticipants());

              case 3:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getParticipants() {
        return _getParticipants.apply(this, arguments);
      }

      return getParticipants;
    }()
    /**
     * Get conversation participants count.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Conversations system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getParticipantsCount",
    value: function () {
      var _getParticipantsCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11() {
        var _response$body$partic;

        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();
                _context11.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context11.sent;
                return _context11.abrupt("return", (_response$body$partic = response.body.participants_count) !== null && _response$body$partic !== void 0 ? _response$body$partic : 0);

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getParticipantsCount() {
        return _getParticipantsCount.apply(this, arguments);
      }

      return getParticipantsCount;
    }()
    /**
     * Get a participant by its SID.
     * @param participantSid Participant SID.
     */

  }, {
    key: "getParticipantBySid",
    value: function () {
      var _getParticipantBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(participantSid) {
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", this.participantsEntity.getParticipantBySid(participantSid));

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getParticipantBySid(_x10) {
        return _getParticipantBySid.apply(this, arguments);
      }

      return getParticipantBySid;
    }()
    /**
     * Get a participant by its identity.
     * @param identity Participant identity.
     */

  }, {
    key: "getParticipantByIdentity",
    value: function () {
      var _getParticipantByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13() {
        var identity,
            _args13 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                identity = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : "";
                return _context13.abrupt("return", this.participantsEntity.getParticipantByIdentity(identity !== null && identity !== void 0 ? identity : ""));

              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getParticipantByIdentity() {
        return _getParticipantByIdentity.apply(this, arguments);
      }

      return getParticipantByIdentity;
    }()
    /**
     * Get the total message count in the conversation.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Conversations system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getMessagesCount",
    value: function () {
      var _getMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14() {
        var _response$body$messag;

        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();
                _context14.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context14.sent;
                return _context14.abrupt("return", (_response$body$messag = response.body.messages_count) !== null && _response$body$messag !== void 0 ? _response$body$messag : 0);

              case 5:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getMessagesCount() {
        return _getMessagesCount.apply(this, arguments);
      }

      return getMessagesCount;
    }()
    /**
     * Get unread messages count for the user if they are a participant of this conversation.
     * Rejects if the user is not a participant of the conversation.
     *
     * Use this method to obtain the number of unread messages together with
     * {@link Conversation.updateLastReadMessageIndex} instead of relying on the
     * message indices which may have gaps. See {@link Message.index} for details.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Conversations system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getUnreadMessagesCount",
    value: function () {
      var _getUnreadMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15() {
        var url, response, unreadMessageCount;
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();
                _context15.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context15.sent;

                if (!(response.body.conversation_sid !== this.sid)) {
                  _context15.next = 6;
                  break;
                }

                throw new Error("Conversation was not found in the user conversations list");

              case 6:
                unreadMessageCount = response.body.unread_messages_count;

                if (!(typeof unreadMessageCount === "number")) {
                  _context15.next = 9;
                  break;
                }

                return _context15.abrupt("return", unreadMessageCount);

              case 9:
                return _context15.abrupt("return", null);

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getUnreadMessagesCount() {
        return _getUnreadMessagesCount.apply(this, arguments);
      }

      return getUnreadMessagesCount;
    }()
    /**
     * Join the conversation and subscribe to its events.
     */

  }, {
    key: "join",
    value: function () {
      var _join = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.participants, {
                  identity: this.configuration.userIdentity
                });

              case 2:
                return _context16.abrupt("return", this);

              case 3:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function join() {
        return _join.apply(this, arguments);
      }

      return join;
    }()
    /**
     * Leave the conversation.
     */

  }, {
    key: "leave",
    value: function () {
      var _leave = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17() {
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!(this.channelState.status === "joined")) {
                  _context17.next = 3;
                  break;
                }

                _context17.next = 3;
                return this.services.commandExecutor.mutateResource("delete", "".concat(this.links.participants, "/").concat(this.configuration.userIdentity));

              case 3:
                return _context17.abrupt("return", this);

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function leave() {
        return _leave.apply(this, arguments);
      }

      return leave;
    }()
    /**
     * Remove a participant from the conversation. When a string is passed as the
     * argument, it will assume that the string is an identity or SID.
     * @param participant Identity, SID or the participant object to remove.
     */

    /* eslint-disable @typescript-eslint/ban-ts-comment */
    // @ts-ignore TODO: fix validateTypesAsync typing

  }, {
    key: "removeParticipant",
    value: function () {
      var _removeParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18(participant) {
        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.participantsEntity.remove(typeof participant === "string" ? participant : participant.sid);

              case 2:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function removeParticipant(_x11) {
        return _removeParticipant.apply(this, arguments);
      }

      return removeParticipant;
    }()
    /**
     * Send a message to the conversation.
     * @param message Message body for the text message,
     * `FormData` or {@link SendMediaOptions} for media content. Sending FormData is supported only with the browser engine.
     * @param messageAttributes Attributes for the message.
     * @param emailOptions Email options for the message.
     * @return Index of the new message.
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19(message, messageAttributes, emailOptions) {
        var _parseToNumber2;

        var _parseToNumber, _response, response;

        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!(typeof message === "string" || message === null)) {
                  _context19.next = 5;
                  break;
                }

                _context19.next = 3;
                return this.messagesEntity.send(message, messageAttributes, emailOptions);

              case 3:
                _response = _context19.sent;
                return _context19.abrupt("return", (_parseToNumber = parseToNumber(_response.index)) !== null && _parseToNumber !== void 0 ? _parseToNumber : 0);

              case 5:
                _context19.next = 7;
                return this.messagesEntity.sendMedia(message, messageAttributes, emailOptions);

              case 7:
                response = _context19.sent;
                return _context19.abrupt("return", (_parseToNumber2 = parseToNumber(response.index)) !== null && _parseToNumber2 !== void 0 ? _parseToNumber2 : 0);

              case 9:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function sendMessage(_x12, _x13, _x14) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
    /**
     * New interface to prepare for sending a message.
     * Use instead of `sendMessage`.
     * @return A MessageBuilder to help set all message sending options.
     */

  }, {
    key: "prepareMessage",
    value: function prepareMessage() {
      return new MessageBuilder(this.limits, this.messagesEntity);
    }
    /**
     * Set last read message index of the conversation to the index of the last known message.
     * @return Resulting unread messages count in the conversation.
     */

  }, {
    key: "setAllMessagesRead",
    value: function () {
      var _setAllMessagesRead = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20() {
        var messagesPage;
        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this._subscribeStreams();

              case 2:
                _context20.next = 4;
                return this.getMessages(1);

              case 4:
                messagesPage = _context20.sent;

                if (!(messagesPage.items.length > 0)) {
                  _context20.next = 7;
                  break;
                }

                return _context20.abrupt("return", this.advanceLastReadMessageIndex(messagesPage.items[0].index));

              case 7:
                return _context20.abrupt("return", Promise.resolve(0));

              case 8:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function setAllMessagesRead() {
        return _setAllMessagesRead.apply(this, arguments);
      }

      return setAllMessagesRead;
    }()
    /**
     * Set all messages in the conversation unread.
     * @return Resulting unread messages count in the conversation.
     */

  }, {
    key: "setAllMessagesUnread",
    value: function () {
      var _setAllMessagesUnread = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21() {
        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this._subscribeStreams();

              case 2:
                _context21.next = 4;
                return this._setLastReadMessageIndex(null);

              case 4:
                return _context21.abrupt("return", _context21.sent);

              case 5:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function setAllMessagesUnread() {
        return _setAllMessagesUnread.apply(this, arguments);
      }

      return setAllMessagesUnread;
    }()
    /**
     * Set user notification level for this conversation.
     * @param notificationLevel New user notification level.
     */

  }, {
    key: "setUserNotificationLevel",
    value: function () {
      var _setUserNotificationLevel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22(notificationLevel) {
        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.services.commandExecutor.mutateResource("post", "".concat(this.configuration.links.myConversations, "/").concat(this.sid), {
                  notification_level: notificationLevel
                });

              case 2:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function setUserNotificationLevel(_x15) {
        return _setUserNotificationLevel.apply(this, arguments);
      }

      return setUserNotificationLevel;
    }()
    /**
     * Send a notification to the server indicating that this client is currently typing in this conversation.
     * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.
     */

  }, {
    key: "typing",
    value: function typing() {
      return this.services.typingIndicator.send(this.sid);
    }
    /**
     * Update the attributes of the conversation.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context23.abrupt("return", this);

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function updateAttributes(_x16) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update the friendly name of the conversation.
     * @param friendlyName New friendly name.
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24(friendlyName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                if (!(this.channelState.friendlyName !== friendlyName)) {
                  _context24.next = 3;
                  break;
                }

                _context24.next = 3;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  friendly_name: friendlyName
                });

              case 3:
                return _context24.abrupt("return", this);

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function updateFriendlyName(_x17) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Set the last read message index to the current read horizon.
     * @param index Message index to set as last read.
     * If null is provided, then the behavior is identical to {@link Conversation.setAllMessagesUnread}.
     * @returns Resulting unread messages count in the conversation.
     */

  }, {
    key: "updateLastReadMessageIndex",
    value: function () {
      var _updateLastReadMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context25.abrupt("return", this._setLastReadMessageIndex(index));

              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function updateLastReadMessageIndex(_x18) {
        return _updateLastReadMessageIndex.apply(this, arguments);
      }

      return updateLastReadMessageIndex;
    }()
    /**
     * Update the unique name of the conversation.
     * @param uniqueName New unique name for the conversation. Setting unique name to null removes it.
     */

  }, {
    key: "updateUniqueName",
    value: function () {
      var _updateUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee26(uniqueName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                if (!(this.channelState.uniqueName !== uniqueName)) {
                  _context26.next = 4;
                  break;
                }

                if (!uniqueName) {
                  uniqueName = "";
                }

                _context26.next = 4;
                return this.services.commandExecutor.mutateResource("post", this.links.self, {
                  unique_name: uniqueName
                });

              case 4:
                return _context26.abrupt("return", this);

              case 5:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function updateUniqueName(_x19) {
        return _updateUniqueName.apply(this, arguments);
      }

      return updateUniqueName;
    }()
  }], [{
    key: "preprocessUpdate",
    value: function preprocessUpdate(update, conversationSid) {
      try {
        if (typeof update.attributes === "string") {
          update.attributes = JSON.parse(update.attributes);
        } else if (update.attributes) {
          JSON.stringify(update.attributes);
        }
      } catch (e) {
        log$3.warn("Retrieved malformed attributes from the server for conversation: " + conversationSid);
        update.attributes = {};
      }

      try {
        if (update.dateCreated) {
          update.dateCreated = new Date(update.dateCreated);
        }
      } catch (e) {
        log$3.warn("Retrieved malformed dateCreated from the server for conversation: " + conversationSid);
        delete update.dateCreated;
      }

      try {
        if (update.dateUpdated) {
          update.dateUpdated = new Date(update.dateUpdated);
        }
      } catch (e) {
        log$3.warn("Retrieved malformed dateUpdated from the server for conversation: " + conversationSid);
        delete update.dateUpdated;
      }

      try {
        if (update.lastMessage && update.lastMessage.timestamp) {
          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);
        }
      } catch (e) {
        log$3.warn("Retrieved malformed lastMessage.timestamp from the server for conversation: " + conversationSid);
        delete update.lastMessage.timestamp;
      }
    }
  }]);

  return Conversation;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Conversation, "participantJoined", "participantJoined");

_defineProperty__default['default'](Conversation, "participantLeft", "participantLeft");

_defineProperty__default['default'](Conversation, "participantUpdated", "participantUpdated");

_defineProperty__default['default'](Conversation, "messageAdded", "messageAdded");

_defineProperty__default['default'](Conversation, "messageRemoved", "messageRemoved");

_defineProperty__default['default'](Conversation, "messageUpdated", "messageUpdated");

_defineProperty__default['default'](Conversation, "typingEnded", "typingEnded");

_defineProperty__default['default'](Conversation, "typingStarted", "typingStarted");

_defineProperty__default['default'](Conversation, "updated", "updated");

_defineProperty__default['default'](Conversation, "removed", "removed");

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString, optionalAttributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "add", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString, declarativeTypeValidator.nonEmptyString, optionalAttributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String, Object, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "addNonChatParticipant", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonNegativeInteger), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Conversation.prototype, "advanceLastReadMessageIndex", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["undefined", declarativeTypeValidator.nonNegativeInteger], ["undefined", declarativeTypeValidator.nonNegativeInteger], ["undefined", declarativeTypeValidator.literal("backwards", "forward")]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Number, String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getMessages", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getParticipantBySid", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getParticipantByIdentity", null);

__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.nonEmptyString, Participant]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "removeParticipant", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["string", declarativeTypeValidator.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.
declarativeTypeValidator.custom(function (value) {
  return [value instanceof FormData, "an instance of FormData"];
}), declarativeTypeValidator.objectSchema("media options", {
  contentType: declarativeTypeValidator.nonEmptyString,
  media: declarativeTypeValidator.custom(function (value) {
    var isValid = typeof value === "string" && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;

    if (typeof Blob === "function") {
      isValid = isValid || value instanceof Blob;
    }

    return [isValid, "a non-empty string, an instance of Buffer or an instance of Blob"];
  })
})], optionalAttributesValidator, ["undefined", declarativeTypeValidator.literal(null), declarativeTypeValidator.objectSchema("email attributes", {
  subject: [declarativeTypeValidator.nonEmptyString, "undefined"]
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "sendMessage", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal("default", "muted")), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "setUserNotificationLevel", null);

__decorate([declarativeTypeValidator.validateTypesAsync(attributesValidator), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateAttributes", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["string"]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateFriendlyName", null);

__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.literal(null), declarativeTypeValidator.nonNegativeInteger]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateLastReadMessageIndex", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["string", declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateUniqueName", null);

var Deferred = /*#__PURE__*/function () {
  function Deferred() {
    var _this = this;

    _classCallCheck__default['default'](this, Deferred);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
  }

  _createClass__default['default'](Deferred, [{
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "update",
    value: function update(value) {
      this._resolve(value);
    }
  }, {
    key: "set",
    value: function set(value) {
      this.current = value;

      this._resolve(value);
    }
  }, {
    key: "fail",
    value: function fail(e) {
      this._reject(e);
    }
  }]);

  return Deferred;
}();

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$2 = Logger.scope("Conversations");
/**
 * Represents conversations collection
 * {@see Conversation}
 */

var Conversations = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Conversations, _ReplayEventEmitter);

  var _super = _createSuper$2(Conversations);

  function Conversations(configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Conversations);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "conversations", new Map());

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "myConversationsRead", new Deferred());

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "tombstones", new Set());

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "myConversationsFetched", false);

    _this.configuration = configuration;
    _this.services = services;
    return _this;
  }

  _createClass__default['default'](Conversations, [{
    key: "addConversation",
    value: function () {
      var _addConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(options) {
        var _response$sid, _response$sync_object, _response$sync_object2;

        var attributes, response, conversationSid, conversationDocument, links, existingConversation, conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                attributes = typeof (options === null || options === void 0 ? void 0 : options.attributes) !== "undefined" ? options.attributes : {};
                _context.next = 3;
                return this.services.commandExecutor.mutateResource("post", this.configuration.links.conversations, {
                  friendly_name: options.friendlyName,
                  unique_name: options.uniqueName,
                  attributes: typeof attributes !== "undefined" ? JSON.stringify(attributes) : undefined
                });

              case 3:
                response = _context.sent;
                conversationSid = (_response$sid = response.sid) !== null && _response$sid !== void 0 ? _response$sid : null;
                conversationDocument = (_response$sync_object = (_response$sync_object2 = response.sync_objects) === null || _response$sync_object2 === void 0 ? void 0 : _response$sync_object2.conversation) !== null && _response$sync_object !== void 0 ? _response$sync_object : null;
                links = _objectSpread$2({
                  self: response.url
                }, response.links);
                existingConversation = this.conversations.get(conversationSid);

                if (!existingConversation) {
                  _context.next = 12;
                  break;
                }

                _context.next = 11;
                return existingConversation._subscribe();

              case 11:
                return _context.abrupt("return", existingConversation);

              case 12:
                conversation = new Conversation({
                  channel: conversationDocument,
                  entityName: "",
                  uniqueName: "",
                  attributes: null,
                  createdBy: "",
                  friendlyName: "",
                  lastConsumedMessageIndex: 0,
                  dateCreated: null,
                  dateUpdated: null
                }, conversationSid, links, this.configuration, this.services);
                this.conversations.set(conversation.sid, conversation);

                this._registerForEvents(conversation);

                _context.next = 17;
                return conversation._subscribe();

              case 17:
                this.emit("conversationAdded", conversation);
                return _context.abrupt("return", conversation);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addConversation(_x) {
        return _addConversation.apply(this, arguments);
      }

      return addConversation;
    }()
    /**
     * Fetch conversations list and instantiate all necessary objects
     */

  }, {
    key: "fetchConversations",
    value: function () {
      var _fetchConversations = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var _this2 = this;

        var map, myConversations, upserts, _iterator, _step, conversation, errorMessage;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this._getMap();

              case 3:
                map = _context2.sent;
                map.on("itemAdded", function (args) {
                  log$2.debug("itemAdded: ".concat(args.item.key));

                  _this2._upsertConversation("sync", args.item.key, args.item.data);
                });
                map.on("itemRemoved", function (args) {
                  log$2.debug("itemRemoved: ".concat(args.key));
                  var sid = args.key;

                  if (!_this2.myConversationsFetched) {
                    _this2.tombstones.add(sid);
                  }

                  var conversation = _this2.conversations.get(sid);

                  if (!conversation) {
                    return;
                  }

                  if (conversation.status === "joined") {
                    conversation._setStatus("notParticipating", "sync");

                    _this2.emit("conversationLeft", conversation);
                  }

                  _this2.conversations.delete(sid);

                  _this2.emit("conversationRemoved", conversation);

                  conversation.emit("removed", conversation);
                });
                map.on("itemUpdated", function (args) {
                  log$2.debug("itemUpdated: ".concat(args.item.key));

                  _this2._upsertConversation("sync", args.item.key, args.item.data);
                });
                _context2.next = 9;
                return this._fetchMyConversations();

              case 9:
                myConversations = _context2.sent;
                upserts = [];
                _iterator = _createForOfIteratorHelper(myConversations);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    conversation = _step.value;
                    upserts.push(this._upsertConversation("rest", conversation["channel_sid"], conversation));
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                this.myConversationsRead.set(true);
                _context2.next = 16;
                return Promise.all(upserts);

              case 16:
                this.myConversationsFetched = true;
                this.tombstones.clear();
                log$2.debug("The conversations list has been successfully fetched");
                return _context2.abrupt("return", this);

              case 22:
                _context2.prev = 22;
                _context2.t0 = _context2["catch"](0);
                errorMessage = "Failed to fetch the conversations list";

                if (this.services.syncClient.connectionState !== "disconnected") {
                  log$2.error(errorMessage, _context2.t0);
                }

                log$2.debug("ERROR: ".concat(errorMessage), _context2.t0);
                throw _context2.t0;

              case 28:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 22]]);
      }));

      function fetchConversations() {
        return _fetchConversations.apply(this, arguments);
      }

      return fetchConversations;
    }()
  }, {
    key: "getConversations",
    value: function () {
      var _getConversations = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var _this3 = this;

        var conversationsMap, page;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._getMap();

              case 2:
                conversationsMap = _context3.sent;
                _context3.next = 5;
                return conversationsMap.getItems();

              case 5:
                page = _context3.sent;
                return _context3.abrupt("return", this._wrapPaginator(page, function (items) {
                  return Promise.all(items.map(function (item) {
                    return _this3._upsertConversation("sync", item.key, item.data);
                  }));
                }));

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConversations() {
        return _getConversations.apply(this, arguments);
      }

      return getConversations;
    }()
  }, {
    key: "getConversation",
    value: function () {
      var _getConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(sid) {
        var _this4 = this;

        var conversationsMap, page, items;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._getMap();

              case 2:
                conversationsMap = _context4.sent;
                _context4.next = 5;
                return conversationsMap.getItems({
                  key: sid
                });

              case 5:
                page = _context4.sent;
                items = page.items.map(function (item) {
                  return _this4._upsertConversation("sync", item.key, item.data);
                });
                return _context4.abrupt("return", items.length > 0 ? items[0] : null);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getConversation(_x2) {
        return _getConversation.apply(this, arguments);
      }

      return getConversation;
    }()
  }, {
    key: "getConversationByUniqueName",
    value: function () {
      var _getConversationByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(uniqueName) {
        var url, response, body, sid, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.myConversations).path(uniqueName).build();
                _context5.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context5.sent;
                body = response.body;
                sid = body.conversation_sid;
                data = {
                  entityName: null,
                  lastConsumedMessageIndex: body.last_read_message_index,
                  status: (body === null || body === void 0 ? void 0 : body.status) || "unknown",
                  friendlyName: body.friendly_name,
                  dateUpdated: body.date_updated,
                  dateCreated: body.date_created,
                  uniqueName: body.unique_name,
                  createdBy: body.created_by,
                  attributes: body.attributes,
                  channel: body.sync_objects.conversation,
                  notificationLevel: body === null || body === void 0 ? void 0 : body.notification_level,
                  sid: sid
                };
                return _context5.abrupt("return", sid ? this._upsertConversation("sync", sid, data) : null);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getConversationByUniqueName(_x3) {
        return _getConversationByUniqueName.apply(this, arguments);
      }

      return getConversationByUniqueName;
    }()
  }, {
    key: "peekConversation",
    value: function () {
      var _peekConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(sid) {
        var url, response, body, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.conversations).path(sid).build();
                _context6.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context6.sent;
                body = response.body;
                data = {
                  entityName: null,
                  // lastConsumedMessageIndex: body.last_read_message_index,
                  status: (body === null || body === void 0 ? void 0 : body.status) || "unknown",
                  friendlyName: body.friendly_name,
                  dateUpdated: body.date_updated,
                  dateCreated: body.date_created,
                  uniqueName: body.unique_name,
                  createdBy: body.created_by,
                  attributes: body.attributes,
                  channel: "".concat(sid, ".channel"),
                  // notificationLevel: body?.notification_level,
                  sid: sid
                };
                return _context6.abrupt("return", this._upsertConversation("sync", sid, data));

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function peekConversation(_x4) {
        return _peekConversation.apply(this, arguments);
      }

      return peekConversation;
    }()
  }, {
    key: "_getMap",
    value: function () {
      var _getMap2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.services.syncClient.map({
                  id: this.configuration.myConversations,
                  mode: "open_existing"
                });

              case 2:
                return _context7.abrupt("return", _context7.sent);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getMap() {
        return _getMap2.apply(this, arguments);
      }

      return _getMap;
    }()
  }, {
    key: "_wrapPaginator",
    value: function () {
      var _wrapPaginator2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(page, op) {
        var _this5 = this;

        var items;
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return op(page.items);

              case 2:
                items = _context8.sent;
                return _context8.abrupt("return", {
                  items: items,
                  hasNextPage: page.hasNextPage,
                  hasPrevPage: page.hasPrevPage,
                  nextPage: function nextPage() {
                    return page.nextPage().then(function (x) {
                      return _this5._wrapPaginator(x, op);
                    });
                  },
                  prevPage: function prevPage() {
                    return page.prevPage().then(function (x) {
                      return _this5._wrapPaginator(x, op);
                    });
                  }
                });

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function _wrapPaginator(_x5, _x6) {
        return _wrapPaginator2.apply(this, arguments);
      }

      return _wrapPaginator;
    }()
  }, {
    key: "_updateConversation",
    value: function () {
      var _updateConversation2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(source, conversation, data) {
        var _this6 = this;

        var areSourcesDifferent, isChannelSourceSync, updateData;
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                areSourcesDifferent = conversation._statusSource() !== undefined && source !== conversation._statusSource();
                isChannelSourceSync = source !== "rest" || conversation._statusSource() === "sync";

                if (!(areSourcesDifferent && isChannelSourceSync && source !== "sync")) {
                  _context9.next = 5;
                  break;
                }

                log$2.trace("upsertConversation: conversation is known from sync and came from chat, ignoring", {
                  sid: conversation.sid,
                  data: data.status,
                  conversation: conversation.status
                });
                return _context9.abrupt("return");

              case 5:
                if (!(data.status === "joined" && conversation.status !== "joined")) {
                  _context9.next = 13;
                  break;
                }

                conversation._setStatus("joined", source);

                updateData = {};

                if (typeof data.notificationLevel !== "undefined") {
                  updateData.notificationLevel = data.notificationLevel;
                }

                if (typeof data.lastConsumedMessageIndex !== "undefined") {
                  updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
                }

                if (!isEqual__default['default'](updateData, {})) {
                  conversation._update(updateData);
                }

                conversation._subscribe().then(function () {
                  _this6.emit("conversationJoined", conversation);
                });

                return _context9.abrupt("return");

              case 13:
                if (!(data.status === "notParticipating" && conversation.status === "joined")) {
                  _context9.next = 20;
                  break;
                }

                conversation._setStatus("notParticipating", source);

                conversation._update(data);

                _context9.next = 18;
                return conversation._subscribe();

              case 18:
                this.emit("conversationLeft", conversation);
                return _context9.abrupt("return");

              case 20:
                if (!(data.status === "notParticipating")) {
                  _context9.next = 24;
                  break;
                }

                _context9.next = 23;
                return conversation._subscribe();

              case 23:
                return _context9.abrupt("return");

              case 24:
                conversation._update(data);

              case 25:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function _updateConversation(_x7, _x8, _x9) {
        return _updateConversation2.apply(this, arguments);
      }

      return _updateConversation;
    }()
  }, {
    key: "_upsertConversation",
    value: function () {
      var _upsertConversation2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(source, sid, data) {
        var conversation, baseLink, links, newConversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                log$2.trace("upsertConversation called for ".concat(sid), data);
                conversation = this.conversations.get(sid); // If the channel is known, update it

                if (!conversation) {
                  _context10.next = 9;
                  break;
                }

                log$2.trace("upsertConversation: the conversation ".concat(conversation.sid, " is known;") + "its status is known from the source ".concat(conversation._statusSource(), " ") + "and the update came from the source ".concat(source), conversation);
                _context10.next = 6;
                return this._updateConversation(source, conversation, data);

              case 6:
                _context10.next = 8;
                return conversation._subscribe();

              case 8:
                return _context10.abrupt("return", conversation);

              case 9:
                if (!(["chat", "rest"].includes(source) && this.tombstones.has(sid))) {
                  _context10.next = 12;
                  break;
                }

                log$2.trace("upsertChannel: the channel is deleted but reappeared again from chat, ignoring", sid);
                return _context10.abrupt("return", null);

              case 12:
                // If the conversation is unknown, fetch it
                log$2.trace("upsertConversation: creating a local conversation object with sid " + sid, data);
                baseLink = "".concat(this.configuration.links.conversations, "/").concat(sid);
                links = {
                  self: baseLink,
                  messages: "".concat(baseLink, "/Messages"),
                  participants: "".concat(baseLink, "/Participants")
                };
                newConversation = new Conversation(data, sid, links, this.configuration, this.services);
                this.conversations.set(sid, newConversation);
                _context10.next = 19;
                return newConversation._subscribe();

              case 19:
                this._registerForEvents(newConversation);

                this.emit("conversationAdded", newConversation);

                if (data.status === "joined") {
                  newConversation._setStatus("joined", source);

                  this.emit("conversationJoined", newConversation);
                }

                return _context10.abrupt("return", newConversation);

              case 23:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function _upsertConversation(_x10, _x11, _x12) {
        return _upsertConversation2.apply(this, arguments);
      }

      return _upsertConversation;
    }()
  }, {
    key: "_fetchMyConversations",
    value: function () {
      var _fetchMyConversations2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11() {
        var conversations, pageToken, _response$body, url, response, receivedConversations;

        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                conversations = [];
                pageToken = null;

              case 2:
                url = new UriBuilder(this.configuration.links.myConversations);

                if (pageToken) {
                  url.arg("PageToken", pageToken);
                }

                _context11.next = 6;
                return this.services.network.get(url.build());

              case 6:
                response = _context11.sent;
                receivedConversations = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.conversations.map(function (conversationDescriptor) {
                  return {
                    descriptor: conversationDescriptor,
                    channel_sid: conversationDescriptor.conversation_sid,
                    status: conversationDescriptor.status,
                    channel: conversationDescriptor.sync_objects.conversation,
                    messages: conversationDescriptor.sync_objects.messages,
                    roster: "".concat(conversationDescriptor.conversation_sid, ".roster"),
                    lastConsumedMessageIndex: conversationDescriptor.last_read_message_index,
                    notificationLevel: conversationDescriptor.notification_level
                  };
                });
                pageToken = response.body.meta.next_token;
                conversations = [].concat(_toConsumableArray__default['default'](conversations), _toConsumableArray__default['default'](receivedConversations));

              case 10:
                if (pageToken) {
                  _context11.next = 2;
                  break;
                }

              case 11:
                return _context11.abrupt("return", conversations);

              case 12:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function _fetchMyConversations() {
        return _fetchMyConversations2.apply(this, arguments);
      }

      return _fetchMyConversations;
    }()
  }, {
    key: "_onConversationRemoved",
    value: function _onConversationRemoved(sid) {
      var conversation = this.conversations.get(sid);

      if (conversation) {
        this.conversations.delete(sid);
        this.emit("conversationRemoved", conversation);
      }
    }
  }, {
    key: "_registerForEvents",
    value: function _registerForEvents(conversation) {
      var _this7 = this;

      conversation.on("removed", function () {
        return _this7._onConversationRemoved(conversation.sid);
      });
      conversation.on("updated", function (args) {
        return _this7.emit("conversationUpdated", args);
      });
      conversation.on("participantJoined", function (participant) {
        return _this7.emit("participantJoined", participant);
      });
      conversation.on("participantLeft", function (participant) {
        return _this7.emit("participantLeft", participant);
      });
      conversation.on("participantUpdated", function (args) {
        return _this7.emit("participantUpdated", args);
      });
      conversation.on("messageAdded", function (message) {
        return _this7.emit("messageAdded", message);
      });
      conversation.on("messageUpdated", function (args) {
        return _this7.emit("messageUpdated", args);
      });
      conversation.on("messageRemoved", function (message) {
        return _this7.emit("messageRemoved", message);
      });
      conversation.on("typingStarted", function (participant) {
        return _this7.emit("typingStarted", participant);
      });
      conversation.on("typingEnded", function (participant) {
        return _this7.emit("typingEnded", participant);
      });
    }
  }]);

  return Conversations;
}(replayEventEmitter.ReplayEventEmitter);

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Container for known users
 */

var Users = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Users, _ReplayEventEmitter);

  var _super = _createSuper$1(Users);

  function Users(myself, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Users);

    _this = _super.call(this);
    _this.configuration = configuration;
    _this.services = services;
    _this.fifoStack = [];
    _this.myself = myself;

    _this.myself.on("updated", function (args) {
      return _this.emit("userUpdated", args);
    });

    _this.myself.on("userSubscribed", function () {
      return _this.emit("userSubscribed", _this.myself);
    });

    _this.myself.on("userUnsubscribed", function () {
      _this.emit("userUnsubscribed", _this.myself);

      _this.myself._ensureFetched();
    });

    _this.subscribedUsers = new Map();
    return _this;
  }

  _createClass__default['default'](Users, [{
    key: "handleUnsubscribeUser",
    value: function handleUnsubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        this.subscribedUsers.delete(user.identity);
      }

      var foundItemIndex = 0;
      var foundItem = this.fifoStack.find(function (item, index) {
        if (item == user.identity) {
          foundItemIndex = index;
          return true;
        }

        return false;
      });

      if (foundItem) {
        this.fifoStack.splice(foundItemIndex, 1);
      }

      this.emit("userUnsubscribed", user);
    }
  }, {
    key: "handleSubscribeUser",
    value: function handleSubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        return;
      }

      if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {
        var _this$subscribedUsers, _this$subscribedUsers2;

        var item = this.fifoStack.shift();
        (_this$subscribedUsers = this.subscribedUsers) === null || _this$subscribedUsers === void 0 ? void 0 : (_this$subscribedUsers2 = _this$subscribedUsers.get(item)) === null || _this$subscribedUsers2 === void 0 ? void 0 : _this$subscribedUsers2.unsubscribe();
      }

      this.fifoStack.push(user.identity);
      this.subscribedUsers.set(user.identity, user);
      this.emit("userSubscribed", user);
    }
    /**
     * Gets user, if it's in subscribed list - then return the user object from it,
     * if not - then subscribes and adds user to the FIFO stack
     * @returns {Promise<User>} Fully initialized user
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this2 = this;

        var identity,
            entityName,
            user,
            newUser,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                identity = _args.length > 0 && _args[0] !== undefined ? _args[0] : "";
                entityName = _args.length > 1 && _args[1] !== undefined ? _args[1] : "";
                _context.next = 4;
                return this.myself._ensureFetched();

              case 4:
                if (!(identity == this.myself.identity)) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", this.myself);

              case 6:
                user = this.subscribedUsers.get(identity);

                if (!user) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", user);

              case 9:
                _context.t0 = entityName;

                if (_context.t0) {
                  _context.next = 14;
                  break;
                }

                _context.next = 13;
                return this.getSyncUniqueName(identity);

              case 13:
                _context.t0 = _context.sent;

              case 14:
                entityName = _context.t0;
                newUser = new User(identity, entityName, this.configuration, this.services);
                newUser.on("updated", function (args) {
                  return _this2.emit("userUpdated", args);
                });
                newUser.on("userSubscribed", function () {
                  return _this2.handleSubscribeUser(newUser);
                });
                newUser.on("userUnsubscribed", function () {
                  return _this2.handleUnsubscribeUser(newUser);
                });
                _context.next = 21;
                return newUser._ensureFetched();

              case 21:
                return _context.abrupt("return", newUser);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var users;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.myself._ensureFetched();

              case 2:
                users = [this.myself];
                this.subscribedUsers.forEach(function (user) {
                  return users.push(user);
                });
                return _context2.abrupt("return", users);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
    /**
     * @returns {Promise<string>} User's sync unique name
     */

  }, {
    key: "getSyncUniqueName",
    value: function () {
      var _getSyncUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(identity) {
        var _response$body$sync_o, _response$body;

        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.users).path(identity).build();
                _context3.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context3.sent;
                return _context3.abrupt("return", (_response$body$sync_o = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.sync_objects.user_info_map) !== null && _response$body$sync_o !== void 0 ? _response$body$sync_o : "");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getSyncUniqueName(_x) {
        return _getSyncUniqueName.apply(this, arguments);
      }

      return getSyncUniqueName;
    }()
  }]);

  return Users;
}(replayEventEmitter.ReplayEventEmitter);

var log$1 = Logger.scope("TypingIndicator");
/**
 * An important note in regards to typing timeout timers. There are two places that the SDK can get the "typing_timeout" attribute from. The first
 * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the
 * "typing_timeout" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a
 * notification of type "twilio.ipmsg.typing_indicator". In this case, the "typing_timeout" value will be +1 of that in the console. This
 * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,
 * the timeout returned from the notification should be used as the timeout for the "typingEnded" event, +1 is to account for latency.
 *
 * @private
 */

/**
 * @class TypingIndicator
 *
 * @constructor
 * @private
 */

var TypingIndicator = /*#__PURE__*/function () {
  function TypingIndicator(getConversation, config, services) {
    _classCallCheck__default['default'](this, TypingIndicator);

    this.configuration = config;
    this.services = services;
    this.getConversation = getConversation;
    this.serviceTypingTimeout = null;
    this.sentUpdates = new Map();
  }

  _createClass__default['default'](TypingIndicator, [{
    key: "typingTimeout",
    get: function get() {
      return this.configuration.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.configuration.typingIndicatorTimeoutDefault;
    }
    /**
     * Initialize TypingIndicator controller
     * Registers for needed message types and sets listeners
     * @private
     */

  }, {
    key: "initialize",
    value: function initialize() {
      var _this = this;

      // this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');
      this.services.notificationClient.on("message", /*#__PURE__*/function () {
        var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(type, message) {
          return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(type === NotificationTypes.TYPING_INDICATOR)) {
                    _context.next = 3;
                    break;
                  }

                  _context.next = 3;
                  return _this._handleRemoteTyping(message);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
    /**
     * Remote participants typing events handler
     */

  }, {
    key: "_handleRemoteTyping",
    value: function () {
      var _handleRemoteTyping2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(message) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                log$1.trace("Got new typing indicator ", message);
                this.getConversation(message.channel_sid).then(function (conversation) {
                  if (!conversation) {
                    return;
                  }

                  conversation.participants.forEach(function (participant) {
                    if (participant.identity !== message.identity) {
                      return;
                    }

                    var timeout = _this2.configuration.typingIndicatorTimeoutOverride ? _this2.configuration.typingIndicatorTimeoutOverride + 1000 : message.typing_timeout * 1000;

                    participant._startTyping(timeout);
                  });
                }).catch(function (err) {
                  log$1.error(err);
                  throw err;
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _handleRemoteTyping(_x3) {
        return _handleRemoteTyping2.apply(this, arguments);
      }

      return _handleRemoteTyping;
    }()
    /**
     * Send typing event for the given conversation sid
     * @param {String} conversationSid
     */

  }, {
    key: "send",
    value: function send(conversationSid) {
      var lastUpdate = this.sentUpdates.get(conversationSid);

      if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {
        return Promise.resolve();
      }

      this.sentUpdates.set(conversationSid, Date.now());
      return this._send(conversationSid);
    }
  }, {
    key: "_send",
    value: function _send(conversationSid) {
      var _this3 = this;

      log$1.trace("Sending typing indicator");
      var url = this.configuration.links.typing;
      var headers = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      var body = "ChannelSid=".concat(conversationSid);
      return this.services.twilsockClient.post(url, headers, body, this.configuration.productId).then(function (response) {
        if (response.body.hasOwnProperty("typing_timeout")) {
          _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;
        }
      }).catch(function (err) {
        log$1.error("Failed to send typing indicator:", err);
        throw err;
      });
    }
  }]);

  return TypingIndicator;
}();

/**
 * Push notification for a Conversations client.
 */
var PushNotification =
/**
 * Title of the notification.
 */

/**
 * Text of the notification.
 */

/**
 * Sound of the notification.
 */

/**
 * Number of the badge.
 */

/**
 * Notification action (`click_action` in FCM terms and `category` in APN terms).
 */

/**
 * Type of the notification.
 */

/**
 * Additional data of the conversation.
 */

/**
 * @internal
 */
function PushNotification(data) {
  _classCallCheck__default['default'](this, PushNotification);

  this.title = data.title || null;
  this.body = data.body || null;
  this.sound = data.sound || null;
  this.badge = data.badge || null;
  this.action = data.action || null;
  this.type = data.type || null;
  this.data = data.data || {};
};

var version = "2.1.0";

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var trimSlashes = function trimSlashes(url) {
  return url.replace(/(^\/+|\/+$)/g, "");
};

var isMutationConflictResponse = function isMutationConflictResponse(response) {
  return response.status.code === 202;
};

var CommandExecutor = /*#__PURE__*/function () {
  function CommandExecutor(_serviceUrl, _services, _productId) {
    _classCallCheck__default['default'](this, CommandExecutor);

    this._serviceUrl = _serviceUrl;
    this._services = _services;
    this._productId = _productId;
  }

  _createClass__default['default'](CommandExecutor, [{
    key: "_preProcessUrl",
    value: function _preProcessUrl(url) {
      var trimmedUrl = trimSlashes(url);

      if (/^https?:\/\//.test(url)) {
        return trimmedUrl;
      }

      return "".concat(trimSlashes(this._serviceUrl), "/").concat(trimmedUrl);
    }
  }, {
    key: "_makeRequest",
    value: function () {
      var _makeRequest2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(method, url, requestBody, headers) {
        var preProcessedUrl, finalHeaders, response, getUrl;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                preProcessedUrl = this._preProcessUrl(url);
                finalHeaders = _objectSpread$1({
                  "Content-Type": "application/json; charset=utf-8"
                }, headers || {});
                _context.t0 = method;
                _context.next = _context.t0 === "get" ? 5 : _context.t0 === "post" ? 11 : _context.t0 === "delete" ? 15 : 19;
                break;

              case 5:
                getUrl = preProcessedUrl;

                if (requestBody) {
                  getUrl += "?" + Object.entries(requestBody).map(function (entry) {
                    return entry.map(encodeURIComponent).join("=");
                  }).join("&");
                }

                _context.next = 9;
                return this._services.transport.get(getUrl, finalHeaders, this._productId);

              case 9:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 11:
                _context.next = 13;
                return this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);

              case 13:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 15:
                _context.next = 17;
                return this._services.transport.delete(preProcessedUrl, finalHeaders, {}, this._productId);

              case 17:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 19:
                if (!(response.status.code < 200 || response.status.code >= 300)) {
                  _context.next = 21;
                  break;
                }

                throw new Error("Request responded with a non-success code ".concat(response.status.code));

              case 21:
                return _context.abrupt("return", response);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _makeRequest(_x, _x2, _x3, _x4) {
        return _makeRequest2.apply(this, arguments);
      }

      return _makeRequest;
    }()
  }, {
    key: "fetchResource",
    value: function () {
      var _fetchResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(url, requestBody) {
        var _this = this;

        var maxAttemptsCount, result;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                maxAttemptsCount = 6;
                _context2.prev = 1;
                _context2.next = 4;
                return new operationRetrier.AsyncRetrier({
                  min: 50,
                  max: 1600,
                  maxAttemptsCount: maxAttemptsCount
                }).run(function () {
                  return _this._makeRequest("get", url, requestBody);
                });

              case 4:
                result = _context2.sent;
                return _context2.abrupt("return", result.body);

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](1);
                throw new Error("Fetch resource from \"".concat(url, "\" failed."));

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 8]]);
      }));

      function fetchResource(_x5, _x6) {
        return _fetchResource.apply(this, arguments);
      }

      return fetchResource;
    }()
  }, {
    key: "mutateResource",
    value: function () {
      var _mutateResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(method, url, requestBody) {
        var result;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._makeRequest(method, url, requestBody, {
                  "X-Twilio-Mutation-Id": uuid.v4()
                });

              case 2:
                result = _context3.sent;

                if (!isMutationConflictResponse(result)) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 6;
                return this.fetchResource(result.body.resource_url);

              case 6:
                return _context3.abrupt("return", _context3.sent);

              case 7:
                return _context3.abrupt("return", result.body);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function mutateResource(_x7, _x8, _x9) {
        return _mutateResource.apply(this, arguments);
      }

      return mutateResource;
    }()
  }]);

  return CommandExecutor;
}();

var _class, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Client_1;
var log = Logger.scope("Client");
var SDK_VERSION = version;

var ClientServices = function ClientServices() {
  _classCallCheck__default['default'](this, ClientServices);
};
/**
 * A client is the starting point to the Twilio Conversations functionality.
 */


exports.Client = Client_1 = (_temp = _class = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Client, _ReplayEventEmitter);

  var _super = _createSuper(Client);

  /**
   * Client connection state.
   */

  /**
   * Current version of the Conversations client.
   */

  /**
   * Current version of the Conversations client.
   */

  /**
   * Returned Conversations instance is not yet fully initialized. Calling any operations will block until it is.
   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state
   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).
   *
   * @param fpaToken Access token
   * @param options Options to customize the Client
   * @returns A not yet fully-initialized client.
   */
  function Client(fpaToken) {
    var _this$options$logLeve, _this$options$twilsoc, _this$options$transpo, _this$options$notific, _this$options$syncCli;

    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Client);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "connectionState", "unknown");

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "version", SDK_VERSION);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "parsePushNotification", Client_1.parsePushNotification);

    _this.fpaToken = fpaToken !== null && fpaToken !== void 0 ? fpaToken : "";
    _this.options = options !== null && options !== void 0 ? options : {};

    if (!_this.options.disableDeepClone) {
      var _options = _objectSpread(_objectSpread({}, _this.options), {}, {
        transport: undefined,
        twilsockClient: undefined
      });

      _options = deepClone(_options);
      _options.transport = _this.options.transport;
      _options.twilsockClient = _this.options.twilsockClient;
      _this.options = _options;
    }

    _this.options.logLevel = (_this$options$logLeve = _this.options.logLevel) !== null && _this$options$logLeve !== void 0 ? _this$options$logLeve : "silent";
    log.setLevel(_this.options.logLevel);
    var productId = _this.options.productId = "ip_messaging"; // Filling ClientMetadata

    _this.options.clientMetadata = _this.options.clientMetadata || {};

    if (!_this.options.clientMetadata.hasOwnProperty("type")) {
      _this.options.clientMetadata.type = "conversations";
    }

    if (!_this.options.clientMetadata.hasOwnProperty("sdk")) {
      _this.options.clientMetadata.sdk = "JS";
      _this.options.clientMetadata.sdkv = SDK_VERSION;
    } // Enable session local storage for Sync


    _this.options.Sync = _this.options.Sync || {};

    if (typeof _this.options.Sync.enableSessionStorage === "undefined") {
      _this.options.Sync.enableSessionStorage = true;
    }

    if (_this.options.region) {
      _this.options.Sync.region = _this.options.region;
    }

    if (!fpaToken) {
      throw new Error("A valid Twilio token should be provided");
    }

    _this.services = new ClientServices();
    _this._myself = new User("", "", null, _this.services);
    var startTwilsock = !_this.options.twilsockClient; // Create default init registrations if none were provided.
    // Otherwise, the outside party have to list all the init registrations they
    // need.
    // Init registrations passed to the Conversations client will be passed down
    // to the Sync client as well.

    if (!_this.options.initRegistrations) {
      var initRegistration = new twilsock.InitRegistration(productId);
      Client_1.populateInitRegistrations(initRegistration);
      _this.options.initRegistrations = [initRegistration];
    }

    _this.services.twilsockClient = _this.options.twilsockClient = (_this$options$twilsoc = _this.options.twilsockClient) !== null && _this$options$twilsoc !== void 0 ? _this$options$twilsoc : new twilsock.TwilsockClient(fpaToken, productId, _this.options);

    _this.services.twilsockClient.on("tokenAboutToExpire", function (ttl) {
      return _this.emit("tokenAboutToExpire", ttl);
    });

    _this.services.twilsockClient.on("tokenExpired", function () {
      return _this.emit("tokenExpired");
    });

    _this.services.twilsockClient.on("connectionError", function (error) {
      return _this.emit("connectionError", error);
    });

    _this.services.twilsockClient.on("stateChanged", function (state) {
      log.debug("Handling stateChanged for ConversationsClient: new state ".concat(state));

      if (state !== _this.connectionState) {
        _this.connectionState = state;

        _this.emit("connectionStateChanged", _this.connectionState);
      }
    });

    _this.services.transport = _this.options.transport = (_this$options$transpo = _this.options.transport) !== null && _this$options$transpo !== void 0 ? _this$options$transpo : _this.options.twilsockClient;
    _this.services.notificationClient = _this.options.notificationsClient = (_this$options$notific = _this.options.notificationsClient) !== null && _this$options$notific !== void 0 ? _this$options$notific : new notifications.Notifications(fpaToken, _this.options);
    _this.services.syncClient = _this.options.syncClient = (_this$options$syncCli = _this.options.syncClient) !== null && _this$options$syncCli !== void 0 ? _this$options$syncCli : new twilioSync.SyncClient(fpaToken, _this.options);
    var configurationOptions = (options === null || options === void 0 ? void 0 : options.Chat) || (options === null || options === void 0 ? void 0 : options.IPMessaging) || options || {};
    var region = configurationOptions.region || (options === null || options === void 0 ? void 0 : options.region);
    var baseUrl = configurationOptions.apiUri || configurationOptions.typingUri || "https://aim.".concat(region || "us1", ".twilio.com");
    _this.services.commandExecutor = new CommandExecutor(baseUrl, {
      transport: _this.options.transport
    }, productId);

    var emitFailed = function emitFailed(err) {
      _this._rejectEnsureReady(err);

      _this.emit("stateChanged", "failed");
    };

    _this.services.twilsockClient.once("connectionError", emitFailed);

    _this.services.twilsockClient.once("disconnected", emitFailed); // ConversationsClient will be able to initialize only after twilsock is connected


    _this.services.twilsockClient.once("connected", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
      var startupEvent;
      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              log.debug("ConversationsClient started INITIALIZING");

              _this.services.twilsockClient.off("connectionError", emitFailed);

              _this.services.twilsockClient.off("disconnected", emitFailed);

              _context.prev = 3;
              startupEvent = "conversations.client.startup";

              _this.services.twilsockClient.addPartialTelemetryEvent(new twilsock.TelemetryEventDescription(startupEvent, "Conversations client startup", new Date()), startupEvent, twilsock.TelemetryPoint.Start);

              _context.next = 8;
              return _this._initialize();

            case 8:
              _this.services.twilsockClient.addPartialTelemetryEvent(new twilsock.TelemetryEventDescription("", "", new Date()), startupEvent, twilsock.TelemetryPoint.End);

              _context.next = 15;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](3);

              // Fail ChatClient if initialization is incomplete
              _this._rejectEnsureReady(_context.t0);

              _this.emit("stateChanged", "failed");

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 11]]);
    })));

    _this._ensureReady = new Promise(function (resolve, reject) {
      _this._resolveEnsureReady = resolve;
      _this._rejectEnsureReady = reject;
    }).catch(function () {
      return void 0;
    }); // @todo How to process unhandled rejection here?

    if (startTwilsock) {
      _this.services.twilsockClient.connect();
    }

    return _this;
  }

  _createClass__default['default'](Client, [{
    key: "user",
    get:
    /**
     * Information of the logged-in user. Before client initialization, returns an
     * uninitialized user. Will trigger a {@link Client.userUpdated} event after
     * initialization.
     */
    function get() {
      return this._myself;
    }
    /**
     * Client reachability state. Throws if accessed before the client
     * initialization was completed.
     */

  }, {
    key: "reachabilityEnabled",
    get: function get() {
      if (!this.configuration) {
        throw new Error("Reachability information could not yet be accessed as the client " + "has not yet been initialized. Subscribe to the 'stateChanged' event " + "to properly react to the client initialization.");
      }

      return this.configuration.reachabilityEnabled;
    }
  }, {
    key: "token",
    get: function get() {
      return this.fpaToken;
    }
  }, {
    key: "_subscribeToPushNotifications",
    value: function _subscribeToPushNotifications(channelType) {
      var _this2 = this;

      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CONVERSATION, NotificationTypes.REMOVED_FROM_CONVERSATION, NotificationTypes.TYPING_INDICATOR, NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {
        _this2.services.notificationClient.subscribe(channelType, messageType);
      });
    }
  }, {
    key: "_unsubscribeFromPushNotifications",
    value: function _unsubscribeFromPushNotifications(channelType) {
      var _this3 = this;

      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CONVERSATION, NotificationTypes.REMOVED_FROM_CONVERSATION, NotificationTypes.TYPING_INDICATOR, NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {
        _this3.services.notificationClient.unsubscribe(channelType, messageType);
      });
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var _this4 = this;

        var configurationResponse;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.services.commandExecutor.fetchResource("Client/v2/Configuration");

              case 2:
                configurationResponse = _context2.sent;
                this.configuration = new Configuration(this.options, configurationResponse, log);

                this._myself._resolveInitialization(this.configuration, this.configuration.userIdentity, this.configuration.userInfo, true);

                this.services.typingIndicator = new TypingIndicator(this.getConversationBySid.bind(this), this.configuration, this.services);
                this.services.network = new Network(this.configuration, this.services);
                this.services.users = new Users(this._myself, this.configuration, this.services);
                this.services.users.on("userSubscribed", function (user) {
                  _this4.emit("userSubscribed", user);
                });
                this.services.users.on("userUpdated", function (args) {
                  return _this4.emit("userUpdated", args);
                });
                this.services.users.on("userUnsubscribed", function (user) {
                  _this4.emit("userUnsubscribed", user);
                });
                this.conversations = new Conversations(this.configuration, this.services);
                this.conversations.on("conversationAdded", function (conversation) {
                  _this4.emit("conversationAdded", conversation);
                });
                this.conversations.on("conversationRemoved", function (conversation) {
                  _this4.emit("conversationRemoved", conversation);
                });
                this.conversations.on("conversationJoined", function (conversation) {
                  _this4.emit("conversationJoined", conversation);
                });
                this.conversations.on("conversationLeft", function (conversation) {
                  _this4.emit("conversationLeft", conversation);
                });
                this.conversations.on("conversationUpdated", function (args) {
                  return _this4.emit("conversationUpdated", args);
                });
                this.conversations.on("participantJoined", function (participant) {
                  _this4.emit("participantJoined", participant);
                });
                this.conversations.on("participantLeft", function (participant) {
                  _this4.emit("participantLeft", participant);
                });
                this.conversations.on("participantUpdated", function (args) {
                  return _this4.emit("participantUpdated", args);
                });
                this.conversations.on("messageAdded", function (message) {
                  return _this4.emit("messageAdded", message);
                });
                this.conversations.on("messageUpdated", function (args) {
                  return _this4.emit("messageUpdated", args);
                });
                this.conversations.on("messageRemoved", function (message) {
                  return _this4.emit("messageRemoved", message);
                });
                this.conversations.on("typingStarted", function (participant) {
                  return _this4.emit("typingStarted", participant);
                });
                this.conversations.on("typingEnded", function (participant) {
                  return _this4.emit("typingEnded", participant);
                });
                this.conversationsPromise = this.conversations.fetchConversations().then(function () {
                  return _this4.conversations;
                }).catch(function (error) {
                  throw error;
                });
                _context2.next = 28;
                return this.services.users.myself._ensureFetched();

              case 28:
                Client_1.supportedPushChannels.forEach(function (channelType) {
                  return _this4._subscribeToPushNotifications(channelType);
                });
                this.services.typingIndicator.initialize();
                this.services.mcsClient = new mcsClient.McsClient(this.fpaToken, this.configuration.links.mediaService, this.configuration.links.mediaSetService, _objectSpread(_objectSpread({}, this.options), {}, {
                  transport: undefined
                }));

                this._resolveEnsureReady();

                this.emit("stateChanged", "initialized");

              case 33:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
    /**
     * Gracefully shut down the client.
     */

  }, {
    key: "shutdown",
    value: function () {
      var _shutdown = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._ensureReady;

              case 2:
                _context3.next = 4;
                return this.services.twilsockClient.disconnect();

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function shutdown() {
        return _shutdown.apply(this, arguments);
      }

      return shutdown;
    }()
    /**
     * Update the token used by the client and re-register with the Conversations services.
     * @param token New access token.
     */

  }, {
    key: "updateToken",
    value: function () {
      var _updateToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(token) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._ensureReady;

              case 2:
                log.info("updateToken");

                if (!(this.fpaToken === token)) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return", this);

              case 5:
                _context4.next = 7;
                return this.services.twilsockClient.updateToken(token);

              case 7:
                _context4.next = 9;
                return this.services.notificationClient.updateToken(token);

              case 9:
                _context4.next = 11;
                return this.services.mcsClient.updateToken(token);

              case 11:
                this.fpaToken = token;
                return _context4.abrupt("return", this);

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateToken(_x) {
        return _updateToken.apply(this, arguments);
      }

      return updateToken;
    }()
    /**
     * Get a known conversation by its SID.
     * @param conversationSid Conversation sid
     */

  }, {
    key: "getConversationBySid",
    value: function () {
      var _getConversationBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(conversationSid) {
        var conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._ensureReady;

              case 2:
                _context5.next = 4;
                return this.conversations.myConversationsRead.promise;

              case 4:
                _context5.next = 6;
                return this.conversations.getConversation(conversationSid);

              case 6:
                conversation = _context5.sent;

                if (conversation) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 10;
                return this.conversations.peekConversation(conversationSid);

              case 10:
                conversation = _context5.sent;

              case 11:
                if (conversation) {
                  _context5.next = 13;
                  break;
                }

                throw new Error("Conversation with SID ".concat(conversationSid, " is not found."));

              case 13:
                return _context5.abrupt("return", conversation);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getConversationBySid(_x2) {
        return _getConversationBySid.apply(this, arguments);
      }

      return getConversationBySid;
    }()
    /**
     * Get a known conversation by its unique identifier name.
     * @param uniqueName The unique identifier name of the conversation.
     */

  }, {
    key: "getConversationByUniqueName",
    value: function () {
      var _getConversationByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(uniqueName) {
        var conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._ensureReady;

              case 2:
                _context6.next = 4;
                return this.conversations.myConversationsRead.promise;

              case 4:
                _context6.next = 6;
                return this.conversations.getConversationByUniqueName(uniqueName);

              case 6:
                conversation = _context6.sent;

                if (conversation) {
                  _context6.next = 9;
                  break;
                }

                throw new Error("Conversation with unique name ".concat(uniqueName, " is not found."));

              case 9:
                return _context6.abrupt("return", conversation);

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getConversationByUniqueName(_x3) {
        return _getConversationByUniqueName.apply(this, arguments);
      }

      return getConversationByUniqueName;
    }()
    /**
     * Get the current list of all the subscribed conversations.
     */

  }, {
    key: "getSubscribedConversations",
    value: function () {
      var _getSubscribedConversations = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._ensureReady;

              case 2:
                return _context7.abrupt("return", this.conversationsPromise.then(function (conversations) {
                  return conversations.getConversations();
                }));

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getSubscribedConversations() {
        return _getSubscribedConversations.apply(this, arguments);
      }

      return getSubscribedConversations;
    }()
    /**
     * Create a conversation on the server and subscribe to its events.
     * The default is a conversation with an empty friendly name.
     * @param options Options for the conversation.
     */

  }, {
    key: "createConversation",
    value: function () {
      var _createConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._ensureReady;

              case 2:
                options = options || {};
                return _context8.abrupt("return", this.conversationsPromise.then(function (conversationsEntity) {
                  return conversationsEntity.addConversation(options);
                }));

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function createConversation(_x4) {
        return _createConversation.apply(this, arguments);
      }

      return createConversation;
    }()
    /**
     * Register for push notifications.
     * @param channelType Channel type.
     * @param registrationId Push notification ID provided by the FCM/APNS service on the platform.
     */

  }, {
    key: "setPushRegistrationId",
    value: function () {
      var _setPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(channelType, registrationId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._ensureReady;

              case 2:
                this._subscribeToPushNotifications(channelType);

                this.services.notificationClient.setPushRegistrationId(channelType, registrationId);
                _context9.next = 6;
                return this.services.notificationClient.commitChanges();

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function setPushRegistrationId(_x5, _x6) {
        return _setPushRegistrationId.apply(this, arguments);
      }

      return setPushRegistrationId;
    }()
    /**
     * Unregister from push notifications.
     * @param channelType Channel type.
     * @deprecated Use removePushRegistrations() instead.
     */

  }, {
    key: "unsetPushRegistrationId",
    value: function () {
      var _unsetPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(channelType) {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._ensureReady;

              case 2:
                this._unsubscribeFromPushNotifications(channelType);

                _context10.next = 5;
                return this.services.notificationClient.commitChanges();

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function unsetPushRegistrationId(_x7) {
        return _unsetPushRegistrationId.apply(this, arguments);
      }

      return unsetPushRegistrationId;
    }()
    /**
     * Clear existing registrations directly using provided device token.
     * This is useful to ensure stopped subscriptions without resubscribing.
     *
     * This function goes completely beside the state machine and removes all registrations.
     * Use with caution: if it races with current state machine operations, madness will ensue.
     *
     * @param channelType Channel type.
     * @param registrationId Push notification ID provided by the FCM/APNS service on the platform.
     */

  }, {
    key: "removePushRegistrations",
    value: function () {
      var _removePushRegistrations = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(channelType, registrationId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.services.notificationClient.removeRegistrations(channelType, registrationId);

              case 2:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function removePushRegistrations(_x8, _x9) {
        return _removePushRegistrations.apply(this, arguments);
      }

      return removePushRegistrations;
    }()
  }, {
    key: "handlePushNotification",
    value:
    /**
     * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.
     * @param notificationPayload Push notification payload
     */
    function () {
      var _handlePushNotification = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(notificationPayload) {
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this._ensureReady;

              case 2:
                log.debug("handlePushNotification, notificationPayload=", notificationPayload);
                this.emit("pushNotification", Client_1.parsePushNotification(notificationPayload));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function handlePushNotification(_x10) {
        return _handlePushNotification.apply(this, arguments);
      }

      return handlePushNotification;
    }()
    /**
     * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;
     * if not, then subscribe and add user to the subscribed list.
     * @param identity Identity of the user.
     * @returns A fully initialized user.
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this._ensureReady;

              case 2:
                return _context13.abrupt("return", this.services.users.getUser(identity));

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getUser(_x11) {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * Get a list of subscribed user objects.
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14() {
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this._ensureReady;

              case 2:
                return _context14.abrupt("return", this.services.users.getSubscribedUsers());

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
  }], [{
    key: "populateInitRegistrations",
    value: function populateInitRegistrations(reg) {
      reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);
      twilioSync.SyncClient.populateInitRegistrations(reg);
    }
    /**
     * Fired when a conversation becomes visible to the client. The event is also triggered when the client creates a new conversation.
     * Fired for all conversations client has joined.
     *
     * Parameters:
     * 1. {@link Conversation} `conversation` - the conversation in question
     * @event
     */

  }, {
    key: "create",
    value:
    /**
     * @deprecated Call constructor directly.
     *
     * Factory method to create a Conversations client instance.
     *
     * The factory method will automatically trigger connection.
     * Do not use it if you need finer-grained control.
     *
     * Since this method returns an already-initialized client, some of the events
     * will be lost because they happen *before* the initialization. It is
     * recommended that `client.onWithReplay` is used as opposed to `client.on`
     * for subscribing to client events. The `client.onWithReplay` will re-emit
     * the most recent value for a given event if it emitted before the
     * subscription.
     *
     * @param token Access token.
     * @param options Options to customize the client.
     * @returns Returns a fully initialized client.
     */
    function () {
      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15(token, options) {
        var client;
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (!(options !== null && options !== void 0 && options.twilsockClient)) {
                  _context15.next = 2;
                  break;
                }

                throw new Error("Obsolete usage of ConversationsClient.create() " + "factory method: if you pass twilsock from the outside then you must " + "use ConversationsClient constructor and be prepared to work with " + "uninitialized client.");

              case 2:
                client = new Client_1(token, options);
                _context15.next = 5;
                return client._ensureReady;

              case 5:
                return _context15.abrupt("return", client);

              case 6:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function create(_x12, _x13) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "parsePushNotificationChatData",
    value: function parsePushNotificationChatData(data) {
      var result = {};

      for (var key in Client_1.supportedPushDataFields) {
        if (typeof data[key] === "undefined" || data[key] === null) {
          continue;
        }

        if (key !== "message_index") {
          result[Client_1.supportedPushDataFields[key]] = data[key];
          continue;
        }

        if (parseToNumber(data[key]) !== null) {
          result[Client_1.supportedPushDataFields[key]] = Number(data[key]);
        }
      }

      return result;
    }
    /**
     * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.
     * @param notificationPayload Push notification payload.
     */

  }, {
    key: "parsePushNotification",
    value: function parsePushNotification(notificationPayload) {
      log.debug("parsePushNotification, notificationPayload=", notificationPayload); // APNS specifics

      if (typeof notificationPayload.aps !== "undefined") {
        if (!notificationPayload.twi_message_type) {
          throw new Error("Provided push notification payload does not contain Programmable Chat push notification type");
        }

        var data = Client_1.parsePushNotificationChatData(notificationPayload);
        var apsPayload = notificationPayload.aps;
        var body;
        var title = null;

        if (typeof apsPayload.alert === "string") {
          body = apsPayload.alert || null;
        } else {
          body = apsPayload.alert.body || null;
          title = apsPayload.alert.title || null;
        }

        return new PushNotification({
          title: title,
          body: body,
          sound: apsPayload.sound || null,
          badge: apsPayload.badge || null,
          action: apsPayload.category || null,
          type: notificationPayload.twi_message_type,
          data: data
        });
      } // FCM specifics


      if (typeof notificationPayload.data !== "undefined") {
        var dataPayload = notificationPayload.data;

        if (!dataPayload.twi_message_type) {
          throw new Error("Provided push notification payload does not contain Programmable Chat push notification type");
        }

        var _data = Client_1.parsePushNotificationChatData(notificationPayload.data);

        return new PushNotification({
          title: dataPayload.twi_title || null,
          body: dataPayload.twi_body || null,
          sound: dataPayload.twi_sound || null,
          badge: null,
          action: dataPayload.twi_action || null,
          type: dataPayload.twi_message_type,
          data: _data
        });
      }

      throw new Error("Provided push notification payload is not Programmable Chat notification");
    }
  }]);

  return Client;
}(replayEventEmitter.ReplayEventEmitter), _defineProperty__default['default'](_class, "version", SDK_VERSION), _defineProperty__default['default'](_class, "supportedPushChannels", ["fcm", "apn"]), _defineProperty__default['default'](_class, "supportedPushDataFields", {
  conversation_sid: "conversationSid",
  message_sid: "messageSid",
  message_index: "messageIndex"
}), _defineProperty__default['default'](_class, "conversationAdded", "conversationAdded"), _defineProperty__default['default'](_class, "conversationJoined", "conversationJoined"), _defineProperty__default['default'](_class, "conversationLeft", "conversationLeft"), _defineProperty__default['default'](_class, "conversationRemoved", "conversationRemoved"), _defineProperty__default['default'](_class, "conversationUpdated", "conversationUpdated"), _defineProperty__default['default'](_class, "participantJoined", "participantJoined"), _defineProperty__default['default'](_class, "participantLeft", "participantLeft"), _defineProperty__default['default'](_class, "participantUpdated", "participantUpdated"), _defineProperty__default['default'](_class, "messageAdded", "messageAdded"), _defineProperty__default['default'](_class, "messageRemoved", "messageRemoved"), _defineProperty__default['default'](_class, "messageUpdated", "messageUpdated"), _defineProperty__default['default'](_class, "tokenAboutToExpire", "tokenAboutToExpire"), _defineProperty__default['default'](_class, "tokenExpired", "tokenExpired"), _defineProperty__default['default'](_class, "typingEnded", "typingEnded"), _defineProperty__default['default'](_class, "typingStarted", "typingStarted"), _defineProperty__default['default'](_class, "pushNotification", "pushNotification"), _defineProperty__default['default'](_class, "userSubscribed", "userSubscribed"), _defineProperty__default['default'](_class, "userUnsubscribed", "userUnsubscribed"), _defineProperty__default['default'](_class, "userUpdated", "userUpdated"), _defineProperty__default['default'](_class, "stateChanged", "stateChanged"), _defineProperty__default['default'](_class, "connectionStateChanged", "connectionStateChanged"), _defineProperty__default['default'](_class, "connectionError", "connectionError"), _temp);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "updateToken", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getConversationBySid", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getConversationByUniqueName", null);

__decorate([declarativeTypeValidator.validateTypesAsync(["undefined", declarativeTypeValidator.objectSchema("conversation options", {
  friendlyName: ["string", "undefined"],
  isPrivate: ["boolean", "undefined"],
  uniqueName: ["string", "undefined"]
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], exports.Client.prototype, "createConversation", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal("fcm", "apn"), "string"), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "setPushRegistrationId", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal("fcm", "apn")), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "unsetPushRegistrationId", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal("fcm", "apn"), declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "removePushRegistrations", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], exports.Client.prototype, "handlePushNotification", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getUser", null);

__decorate([declarativeTypeValidator.validateTypesAsync("string", ["undefined", declarativeTypeValidator.pureObject]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object]), __metadata("design:returntype", Promise)], exports.Client, "create", null);

__decorate([declarativeTypeValidator.validateTypes(declarativeTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", PushNotification)], exports.Client, "parsePushNotification", null);

exports.Client = Client_1 = __decorate([declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, [declarativeTypeValidator.pureObject, "undefined"]), __metadata("design:paramtypes", [String, Object])], exports.Client);

exports.AggregatedDeliveryReceipt = AggregatedDeliveryReceipt;
exports.Conversation = Conversation;
exports.DetailedDeliveryReceipt = DetailedDeliveryReceipt;
exports.Media = Media;
exports.Message = Message;
exports.MessageBuilder = MessageBuilder;
exports.NotificationTypes = NotificationTypes;
exports.Participant = Participant;
exports.PushNotification = PushNotification;
exports.RestPaginator = RestPaginator;
exports.UnsentMessage = UnsentMessage;
exports.User = User;
//# sourceMappingURL=browser.js.map
